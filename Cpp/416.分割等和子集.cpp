/*
 * @lc app=leetcode.cn id=416 lang=cpp
 *
 * [416] 分割等和子集
 */

#include <iostream>
#include <vector>
#include <map>
#include <unordered_set>
#include <numeric>

using namespace std;

// @lc code=start
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        if (nums.size() < 2) return false;
        int sum = accumulate(nums.begin(), nums.end(), 0);

        int target = sum >> 1;
        /// 总和为奇数，不能平等分割
        if (sum & 0x1) return false;

        vector<bool> dp(target + 1);
        dp[0] = true;
        
        for (int num : nums) {
            for (int i = target; i >= num; i--) {
                dp[i] = dp[i] || dp[i - num];
            }
        }
        return dp[target];
    }
};
// @lc code=end

int main(int argc, const char * argv[]) {
    // insert code here...

    vector<int> nums;
    
    nums = {1,1};
    // true
    cout << Solution().canPartition(nums) << endl;
    
//    nums = {1,5,11,5};
//    // true
//    cout << Solution().canPartition(nums) << endl;
//
//    nums = {1,2,3,5};
//    // false
//    cout << Solution().canPartition(nums) << endl;
//
//    nums = {1,2,5};
//    // false
//    cout << Solution().canPartition(nums) << endl;

    nums = {99,1};
    // false
    cout << Solution().canPartition(nums) << endl;

    nums = {};
    // false
    cout << Solution().canPartition(nums) << endl;

    nums = {4,4,4,4,4,4,4,4,8,8,8,8,8,8,8,8,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,20,20,20,20,20,20,20,20,24,24,24,24,24,24,24,24,28,28,28,28,28,28,28,28,32,32,32,32,32,32,32,32,36,36,36,36,36,36,36,36,40,40,40,40,40,40,40,40,44,44,44,44,44,44,44,44,48,48,48,48,48,48,48,48,52,52,52,52,52,52,52,52,56,56,56,56,56,56,56,56,60,60,60,60,60,60,60,60,64,64,64,64,64,64,64,64,68,68,68,68,68,68,68,68,72,72,72,72,72,72,72,72,76,76,76,76,76,76,76,76,80,80,80,80,80,80,80,80,84,84,84,84,84,84,84,84,88,88,88,88,88,88,88,88,92,92,92,92,92,92,92,92,96,96,96,96,96,96,96,96,97,99};
    // false
    cout << Solution().canPartition(nums) << endl;
    
    return 0;
}
