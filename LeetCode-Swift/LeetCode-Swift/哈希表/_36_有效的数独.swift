//
//  _36_有效的数独.swift
//  LeetCode-Swift
//
//  Created by warden on 2019/11/25.
//  Copyright © 2019 warden. All rights reserved.
//
// https://leetcode-cn.com/problems/valid-sudoku/

import Foundation

class _36_有效的数独 {
    func isValidSudoku(_ board: [[Character]]) -> Bool {
        var rows = [Int16](repeating: 0, count: 9)
        var cols = [Int16](repeating: 0, count: 9)
        var boxes = [Int16](repeating: 0, count: 9)
        
        let ascii_1: Character = "1"
        let ascii_value = ascii_1.asciiValue!
        for row in 0..<9 {
            for col in 0..<9 {
                let ch = board[row][col]
                if ch == "." {
                    continue
                }
                let num: Int16 = 1 << (ch.asciiValue! - ascii_value)
                if (rows[row] & num) != 0 {
                    return false
                }
                if (cols[col] & num) != 0 {
                    return false
                }
                let box = (row / 3) * 3 + col / 3
                if (boxes[box] & num) != 0 {
                    return false
                }
                
                rows[row] |= num
                cols[col] |= num
                boxes[box] |= num
            }
        }
        
        return true
    }
}

/**
 输入:
 [
   ["5","3",".",".","7",".",".",".","."],
   ["6",".",".","1","9","5",".",".","."],
   [".","9","8",".",".",".",".","6","."],
   ["8",".",".",".","6",".",".",".","3"],
   ["4",".",".","8",".","3",".",".","1"],
   ["7",".",".",".","2",".",".",".","6"],
   [".","6",".",".",".",".","2","8","."],
   [".",".",".","4","1","9",".",".","5"],
   [".",".",".",".","8",".",".","7","9"]
 ]
 输出: true

 输入:
 [
   ["8","3",".",".","7",".",".",".","."],
   ["6",".",".","1","9","5",".",".","."],
   [".","9","8",".",".",".",".","6","."],
   ["8",".",".",".","6",".",".",".","3"],
   ["4",".",".","8",".","3",".",".","1"],
   ["7",".",".",".","2",".",".",".","6"],
   [".","6",".",".",".",".","2","8","."],
   [".",".",".","4","1","9",".",".","5"],
   [".",".",".",".","8",".",".","7","9"]
 ]
 输出: false
*/
func test_36() {
    let solution = _36_有效的数独()
//    let board: [[Character]] = [
//        ["5", "3", ".", ".", "7", ".", ".", ".", "."],
//        ["6", ".", ".", "1", "9", "5", ".", ".", "."],
//        [".", "9", "8", ".", ".", ".", ".", "6", "."],
//        ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
//        ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
//        ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
//        [".", "6", ".", ".", ".", ".", "2", "8", "."],
//        [".", ".", ".", "4", "1", "9", ".", ".", "5"],
//        [".", ".", ".", ".", "8", ".", ".", "7", "9"]
//    ]
    let board: [[Character]] = [
        ["8", "3", ".", ".", "7", ".", ".", ".", "."],
        ["6", ".", ".", "1", "9", "5", ".", ".", "."],
        [".", "9", "8", ".", ".", ".", ".", "6", "."],
        ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
        ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
        ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
        [".", "6", ".", ".", ".", ".", "2", "8", "."],
        [".", ".", ".", "4", "1", "9", ".", ".", "5"],
        [".", ".", ".", ".", "8", ".", ".", "7", "9"]
    ]
    print(solution.isValidSudoku(board))
}
