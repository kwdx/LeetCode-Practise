// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 50;
	objects = {

/* Begin PBXBuildFile section */
		89185D23282C0D7D00346F93 /* TreeNode.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8975E5CD281ED16F006F4F6A /* TreeNode.cpp */; };
		8923BB982830C53C0034AA0D /* 812.最大三角形面积.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8923BB972830C53B0034AA0D /* 812.最大三角形面积.cpp */; };
		8923BB9A2830C5990034AA0D /* 812.最大三角形面积.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8923BB992830C5990034AA0D /* 812.最大三角形面积.swift */; };
		89886F4B272C5E47003A626D /* main.swift in Sources */ = {isa = PBXBuildFile; fileRef = 89554FA326BEDED300FEDFF1 /* main.swift */; };
		89886F63272CE20B003A626D /* ListNode.swift in Sources */ = {isa = PBXBuildFile; fileRef = 89886F62272CE20B003A626D /* ListNode.swift */; };
		899A76D82747F72E006DA530 /* TreeNode.swift in Sources */ = {isa = PBXBuildFile; fileRef = 899A76D72747F72E006DA530 /* TreeNode.swift */; };
		89C84276274A09F400A73FAB /* Node.swift in Sources */ = {isa = PBXBuildFile; fileRef = 89C84275274A09F400A73FAB /* Node.swift */; };
		89D65EE12768D97200B855E3 /* PriorityQueue.swift in Sources */ = {isa = PBXBuildFile; fileRef = 89D65EE02768D97200B855E3 /* PriorityQueue.swift */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		89554F9826BEDE7100FEDFF1 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
		89A6BEFD26BD8182007BDF6B /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		8900694827A81AD500EBE650 /* 1342.将数字变成-0-的操作次数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1342.将数字变成-0-的操作次数.swift"; sourceTree = "<group>"; };
		8900694C27A9813100EBE650 /* 1763.最长的美好子字符串.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1763.最长的美好子字符串.swift"; sourceTree = "<group>"; };
		890126E92736395600440D63 /* 268.丢失的数字.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "268.丢失的数字.swift"; sourceTree = "<group>"; };
		89075150276EFD7B009BA671 /* 997.找到小镇的法官.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "997.找到小镇的法官.swift"; sourceTree = "<group>"; };
		89075154276F674C009BA671 /* 1610.可见点的最大数目.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1610.可见点的最大数目.swift"; sourceTree = "<group>"; };
		890C2DDB27EF694600F5191D /* 682.棒球比赛.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "682.棒球比赛.swift"; sourceTree = "<group>"; };
		890C2DDD27F0126B00F5191D /* 2028.找出缺失的观测数据.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2028.找出缺失的观测数据.swift"; sourceTree = "<group>"; };
		890E883F2740CB8C0073633B /* 677.键值映射.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "677.键值映射.swift"; sourceTree = "<group>"; };
		891095852731767C00981C0D /* 237.删除链表中的节点.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "237.删除链表中的节点.swift"; sourceTree = "<group>"; };
		8910958B27342C7B00981C0D /* 367.有效的完全平方数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "367.有效的完全平方数.swift"; sourceTree = "<group>"; };
		8910958D2735799500981C0D /* 1218.最长定差子序列.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1218.最长定差子序列.swift"; sourceTree = "<group>"; };
		8916EA1A279EE5B8000B26A9 /* 2045.到达目的地的第二短时间.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2045.到达目的地的第二短时间.swift"; sourceTree = "<group>"; };
		89185D1F282C0D0100346F93 /* 449.序列化和反序列化二叉搜索树.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "449.序列化和反序列化二叉搜索树.swift"; sourceTree = "<group>"; };
		89185D21282C0D1600346F93 /* 449.序列化和反序列化二叉搜索树.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "449.序列化和反序列化二叉搜索树.cpp"; sourceTree = "<group>"; };
		8919169F27C673B5002B8702 /* 917.仅仅反转字母.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "917.仅仅反转字母.swift"; sourceTree = "<group>"; };
		891916A127C7C705002B8702 /* 1706.球会落何处.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1706.球会落何处.swift"; sourceTree = "<group>"; };
		891916A727C92694002B8702 /* 537.复数乘法.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "537.复数乘法.swift"; sourceTree = "<group>"; };
		891A3A8127F5F0EC0003D731 /* 728.自除数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "728.自除数.swift"; sourceTree = "<group>"; };
		891A3A8727F74DEE0003D731 /* 954.二倍数对数组.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "954.二倍数对数组.swift"; sourceTree = "<group>"; };
		891A3A8927F89D3F0003D731 /* 420.强密码检验器.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "420.强密码检验器.swift"; sourceTree = "<group>"; };
		891C5A62273F718D0047E46E /* 520.检测大写字母.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "520.检测大写字母.swift"; sourceTree = "<group>"; };
		891DCDDF27A57C9A0068417B /* 1765.地图中的最高点.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1765.地图中的最高点.swift"; sourceTree = "<group>"; };
		892023CE27F1E30100F3C7E2 /* 693.交替位二进制数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "693.交替位二进制数.swift"; sourceTree = "<group>"; };
		892023D027F35DA400F3C7E2 /* 2024.考试的最大困扰度.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2024.考试的最大困扰度.swift"; sourceTree = "<group>"; };
		892023D627F4A25C00F3C7E2 /* 1606.找到处理最多请求的服务器.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1606.找到处理最多请求的服务器.swift"; sourceTree = "<group>"; };
		892396DF27624BBD0041A3B9 /* 794.有效的井字游戏.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "794.有效的井字游戏.swift"; sourceTree = "<group>"; };
		8923BB972830C53B0034AA0D /* 812.最大三角形面积.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "812.最大三角形面积.cpp"; sourceTree = "<group>"; };
		8923BB992830C5990034AA0D /* 812.最大三角形面积.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "812.最大三角形面积.swift"; sourceTree = "<group>"; };
		8928424C2822351800484B59 /* 1823.找出游戏的获胜者.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "1823.找出游戏的获胜者.cpp"; sourceTree = "<group>"; };
		8928424E282235AF00484B59 /* 1823.找出游戏的获胜者.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1823.找出游戏的获胜者.swift"; sourceTree = "<group>"; };
		892EA22227A1996100E1E00D /* 2013.检测正方形.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2013.检测正方形.swift"; sourceTree = "<group>"; };
		892EA22427A2E7EB00E1E00D /* 2047.句子中的有效单词数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2047.句子中的有效单词数.swift"; sourceTree = "<group>"; };
		892EC6A2275C994D00CD0593 /* 372.超级次方.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "372.超级次方.swift"; sourceTree = "<group>"; };
		8939CD7C277F587E009F0CEE /* 507.完美数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "507.完美数.swift"; sourceTree = "<group>"; };
		8939CD83277F59A0009F0CEE /* 846.一手顺子.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "846.一手顺子.swift"; sourceTree = "<group>"; };
		8939CD84277F59A0009F0CEE /* 472.连接词.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "472.连接词.swift"; sourceTree = "<group>"; };
		8939CD85277F59A0009F0CEE /* 1296.划分数组为连续数字的集合.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "1296.划分数组为连续数字的集合.swift"; sourceTree = "<group>"; };
		8939CD86277F59A0009F0CEE /* 825.适龄的朋友.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "825.适龄的朋友.swift"; sourceTree = "<group>"; };
		8939CD87277F59A0009F0CEE /* 1995.统计特殊四元组.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "1995.统计特殊四元组.swift"; sourceTree = "<group>"; };
		893E1231272C51AD00EAC6FD /* 198.打家劫舍.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "198.打家劫舍.swift"; sourceTree = "<group>"; };
		893E1234272C554D00EAC6FD /* 215.数组中的第k个最大元素.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "215.数组中的第k个最大元素.swift"; sourceTree = "<group>"; };
		894579FD2820EC1700168863 /* 937.重新排列日志文件.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "937.重新排列日志文件.swift"; sourceTree = "<group>"; };
		894579FF2820EC3C00168863 /* 937.重新排列日志文件.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "937.重新排列日志文件.cpp"; sourceTree = "<group>"; };
		894F524C282415FA00EA6C32 /* 713.乘积小于k的子数组.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "713.乘积小于k的子数组.swift"; sourceTree = "<group>"; };
		894F524E2824161B00EA6C32 /* 713.乘积小于k的子数组.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "713.乘积小于k的子数组.cpp"; sourceTree = "<group>"; };
		894F52502825753F00EA6C32 /* 933.最近的请求次数.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "933.最近的请求次数.cpp"; sourceTree = "<group>"; };
		894F52522825755400EA6C32 /* 933.最近的请求次数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "933.最近的请求次数.swift"; sourceTree = "<group>"; };
		894F52542826C86800EA6C32 /* 433.最小基因变化.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "433.最小基因变化.swift"; sourceTree = "<group>"; };
		894F52562826C88100EA6C32 /* 433.最小基因变化.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "433.最小基因变化.cpp"; sourceTree = "<group>"; };
		894F52582827C1C300EA6C32 /* 442.数组中重复的数据.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "442.数组中重复的数据.swift"; sourceTree = "<group>"; };
		894F525A2827C23400EA6C32 /* 442.数组中重复的数据.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "442.数组中重复的数据.cpp"; sourceTree = "<group>"; };
		894F525C28294A4100EA6C32 /* 942.增减字符串匹配.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "942.增减字符串匹配.cpp"; sourceTree = "<group>"; };
		894F525E28294F0700EA6C32 /* 942.增减字符串匹配.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "942.增减字符串匹配.swift"; sourceTree = "<group>"; };
		89518A0F27A392D7009CA2D8 /* 1996.游戏中弱角色的数量.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1996.游戏中弱角色的数量.swift"; sourceTree = "<group>"; };
		8952093727E0DDE200BA01F2 /* 2044.统计按位或能得到最大值的子集数目.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2044.统计按位或能得到最大值的子集数目.swift"; sourceTree = "<group>"; };
		8952093827E0DDE200BA01F2 /* 393.utf-8-编码验证.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "393.utf-8-编码验证.swift"; sourceTree = "<group>"; };
		8952093927E0DDE200BA01F2 /* 599.两个列表的最小索引总和.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "599.两个列表的最小索引总和.swift"; sourceTree = "<group>"; };
		8952093F27E1C85200BA01F2 /* 432.全-o-1-的数据结构.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "432.全-o-1-的数据结构.swift"; sourceTree = "<group>"; };
		8952094127E2C3F400BA01F2 /* 720.词典中最长的单词.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "720.词典中最长的单词.swift"; sourceTree = "<group>"; };
		8953DFB127AF844900FB2C00 /* 1748.唯一元素的和.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1748.唯一元素的和.swift"; sourceTree = "<group>"; };
		8953DFB727B15D7F00FB2C00 /* 1405.最长快乐字符串.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1405.最长快乐字符串.swift"; sourceTree = "<group>"; };
		8953DFB927B2B55C00FB2C00 /* 1001.网格照明.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1001.网格照明.swift"; sourceTree = "<group>"; };
		8953DFBF27B3FB3F00FB2C00 /* 2006.差的绝对值为-k-的数对数目.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2006.差的绝对值为-k-的数对数目.swift"; sourceTree = "<group>"; };
		8953DFC127B5540200FB2C00 /* 1447.最简分数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1447.最简分数.swift"; sourceTree = "<group>"; };
		89554F9A26BEDE7100FEDFF1 /* Swift_ */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = Swift_; sourceTree = BUILT_PRODUCTS_DIR; };
		89554FA226BEDED300FEDFF1 /* 322.零钱兑换.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "322.零钱兑换.swift"; sourceTree = "<group>"; };
		89554FA326BEDED300FEDFF1 /* main.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = main.swift; sourceTree = "<group>"; };
		8955A7F42783456F00AB2F8D /* 1185.一周中的第几天.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1185.一周中的第几天.swift"; sourceTree = "<group>"; };
		895A04BF27E4B3D200AB66B9 /* 2043.简易银行系统.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2043.简易银行系统.swift"; sourceTree = "<group>"; };
		895A04C127E76EF500AB66B9 /* 606.根据二叉树创建字符串.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "606.根据二叉树创建字符串.swift"; sourceTree = "<group>"; };
		895A04C727E775D800AB66B9 /* 2039.网络空闲的时刻.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2039.网络空闲的时刻.swift"; sourceTree = "<group>"; };
		895A04CC27E8B97F00AB66B9 /* 653.两数之和-iv-输入-bst.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "653.两数之和-iv-输入-bst.swift"; sourceTree = "<group>"; };
		895A04D027EA16DC00AB66B9 /* 2038.如果相邻两个颜色均相同则删除当前颜色.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2038.如果相邻两个颜色均相同则删除当前颜色.swift"; sourceTree = "<group>"; };
		895A04D227EB65ED00AB66B9 /* 440.字典序的第k小数字.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "440.字典序的第k小数字.swift"; sourceTree = "<group>"; };
		895A04D827ECC87100AB66B9 /* 661.图片平滑器.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "661.图片平滑器.swift"; sourceTree = "<group>"; };
		895A04DA27EE088100AB66B9 /* 172.阶乘后的零.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "172.阶乘后的零.swift"; sourceTree = "<group>"; };
		895F9E412764311D00E2DF08 /* 911.在线选举.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "911.在线选举.swift"; sourceTree = "<group>"; };
		896BABCA2791C9CD0099C360 /* 373.查找和最小的k对数字.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "373.查找和最小的k对数字.swift"; sourceTree = "<group>"; };
		896BABCC2792F1420099C360 /* 1716.计算力扣银行的钱.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1716.计算力扣银行的钱.swift"; sourceTree = "<group>"; };
		89723783275A656800EBC5C5 /* 506.相对名次.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "506.相对名次.swift"; sourceTree = "<group>"; };
		89723784275A656900EBC5C5 /* 400.第-n-位数字.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "400.第-n-位数字.swift"; sourceTree = "<group>"; };
		89723785275A656900EBC5C5 /* 786.第-k-个最小的素数分数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "786.第-k-个最小的素数分数.swift"; sourceTree = "<group>"; };
		89723786275A656900EBC5C5 /* 1005.k-次取反后最大化的数组和.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1005.k-次取反后最大化的数组和.swift"; sourceTree = "<group>"; };
		89723787275A656900EBC5C5 /* 1446.连续字符.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1446.连续字符.swift"; sourceTree = "<group>"; };
		8972B690279C14A600D14CE7 /* 1332.删除回文子序列.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1332.删除回文子序列.swift"; sourceTree = "<group>"; };
		8972B692279D1CAF00D14CE7 /* 2034.股票价格波动.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2034.股票价格波动.swift"; sourceTree = "<group>"; };
		897355182776209C0034C87A /* 1154.一年中的第几天.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "1154.一年中的第几天.swift"; sourceTree = "<group>"; };
		897355192776209C0034C87A /* 475.供暖器.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "475.供暖器.swift"; sourceTree = "<group>"; };
		8973551A2776209C0034C87A /* 1705.吃苹果的最大数目.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "1705.吃苹果的最大数目.swift"; sourceTree = "<group>"; };
		8973551B2776209C0034C87A /* 686.重复叠加字符串匹配.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "686.重复叠加字符串匹配.swift"; sourceTree = "<group>"; };
		8973552327776F7E0034C87A /* 1609.奇偶树.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1609.奇偶树.swift"; sourceTree = "<group>"; };
		8975E55F281ED15E006F4F6A /* TreeNode.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = TreeNode.h; sourceTree = "<group>"; };
		8975E560281ED15E006F4F6A /* 150.逆波兰表达式求值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "150.逆波兰表达式求值.cpp"; sourceTree = "<group>"; };
		8975E561281ED15E006F4F6A /* 5841.找出到每个位置为止最长的有效障碍赛跑路线.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5841.找出到每个位置为止最长的有效障碍赛跑路线.cpp"; sourceTree = "<group>"; };
		8975E562281ED15E006F4F6A /* 563.二叉树的坡度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "563.二叉树的坡度.cpp"; sourceTree = "<group>"; };
		8975E563281ED15E006F4F6A /* 27.移除元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "27.移除元素.cpp"; sourceTree = "<group>"; };
		8975E564281ED15E006F4F6A /* 917.仅仅反转字母.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "917.仅仅反转字母.cpp"; sourceTree = "<group>"; };
		8975E565281ED15E006F4F6A /* 206.反转链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "206.反转链表.cpp"; sourceTree = "<group>"; };
		8975E566281ED15F006F4F6A /* 5865.访问完所有房间的第一天.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5865.访问完所有房间的第一天.cpp"; sourceTree = "<group>"; };
		8975E567281ED15F006F4F6A /* 235.二叉搜索树的最近公共祖先.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "235.二叉搜索树的最近公共祖先.cpp"; sourceTree = "<group>"; };
		8975E568281ED15F006F4F6A /* 500.键盘行.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "500.键盘行.cpp"; sourceTree = "<group>"; };
		8975E569281ED15F006F4F6A /* 9.回文数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "9.回文数.cpp"; sourceTree = "<group>"; };
		8975E56A281ED15F006F4F6A /* 1218.最长定差子序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1218.最长定差子序列.cpp"; sourceTree = "<group>"; };
		8975E56B281ED15F006F4F6A /* 678.有效的括号字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "678.有效的括号字符串.cpp"; sourceTree = "<group>"; };
		8975E56C281ED15F006F4F6A /* 1446.连续字符.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1446.连续字符.cpp"; sourceTree = "<group>"; };
		8975E56D281ED15F006F4F6A /* 1629.按键持续时间最长的键.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1629.按键持续时间最长的键.cpp"; sourceTree = "<group>"; };
		8975E56E281ED15F006F4F6A /* 2043.简易银行系统.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2043.简易银行系统.cpp"; sourceTree = "<group>"; };
		8975E56F281ED160006F4F6A /* 453.最小操作次数使数组元素相等-1.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "453.最小操作次数使数组元素相等-1.cpp"; sourceTree = "<group>"; };
		8975E570281ED160006F4F6A /* 434.字符串中的单词数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "434.字符串中的单词数.cpp"; sourceTree = "<group>"; };
		8975E571281ED160006F4F6A /* 5855.找出数组中的第K大整数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5855.找出数组中的第K大整数.cpp"; sourceTree = "<group>"; };
		8975E572281ED161006F4F6A /* 470.用-rand-7-实现-rand-10.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "470.用-rand-7-实现-rand-10.cpp"; sourceTree = "<group>"; };
		8975E573281ED161006F4F6A /* 58.最后一个单词的长度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "58.最后一个单词的长度.cpp"; sourceTree = "<group>"; };
		8975E574281ED162006F4F6A /* 5863.统计特殊四元组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5863.统计特殊四元组.cpp"; sourceTree = "<group>"; };
		8975E575281ED162006F4F6A /* 744.寻找比目标字母大的最小字母.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "744.寻找比目标字母大的最小字母.cpp"; sourceTree = "<group>"; };
		8975E576281ED162006F4F6A /* 1342.将数字变成-0-的操作次数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1342.将数字变成-0-的操作次数.cpp"; sourceTree = "<group>"; };
		8975E577281ED162006F4F6A /* 1380.矩阵中的幸运数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1380.矩阵中的幸运数.cpp"; sourceTree = "<group>"; };
		8975E578281ED162006F4F6A /* 530.二叉搜索树的最小绝对差.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "530.二叉搜索树的最小绝对差.cpp"; sourceTree = "<group>"; };
		8975E579281ED162006F4F6A /* 268.丢失的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "268.丢失的数字.cpp"; sourceTree = "<group>"; };
		8975E57A281ED162006F4F6A /* 629.k个逆序对数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "629.k个逆序对数组.cpp"; sourceTree = "<group>"; };
		8975E57B281ED162006F4F6A /* 869.重新排序得到-2-的幂.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "869.重新排序得到-2-的幂.cpp"; sourceTree = "<group>"; };
		8975E57C281ED162006F4F6A /* 420.强密码检验器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "420.强密码检验器.cpp"; sourceTree = "<group>"; };
		8975E57D281ED162006F4F6A /* 414.第三大的数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "414.第三大的数.cpp"; sourceTree = "<group>"; };
		8975E57E281ED162006F4F6A /* 66.加一-1.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "66.加一-1.cpp"; sourceTree = "<group>"; };
		8975E57F281ED163006F4F6A /* 1480.一维数组的动态和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1480.一维数组的动态和.cpp"; sourceTree = "<group>"; };
		8975E580281ED163006F4F6A /* 1706.球会落何处.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1706.球会落何处.cpp"; sourceTree = "<group>"; };
		8975E581281ED163006F4F6A /* 5843.作为子字符串出现在单词中的字符串数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5843.作为子字符串出现在单词中的字符串数目.cpp"; sourceTree = "<group>"; };
		8975E582281ED163006F4F6A /* 116.填充每个节点的下一个右侧节点指针.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "116.填充每个节点的下一个右侧节点指针.cpp"; sourceTree = "<group>"; };
		8975E583281ED163006F4F6A /* 895.最大频率栈.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "895.最大频率栈.cpp"; sourceTree = "<group>"; };
		8975E584281ED163006F4F6A /* 567.字符串的排列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "567.字符串的排列.cpp"; sourceTree = "<group>"; };
		8975E585281ED163006F4F6A /* 162.寻找峰值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "162.寻找峰值.cpp"; sourceTree = "<group>"; };
		8975E586281ED163006F4F6A /* 2006.差的绝对值为-k-的数对数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2006.差的绝对值为-k-的数对数目.cpp"; sourceTree = "<group>"; };
		8975E587281ED163006F4F6A /* 911.在线选举.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "911.在线选举.cpp"; sourceTree = "<group>"; };
		8975E588281ED163006F4F6A /* 1447.最简分数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1447.最简分数.cpp"; sourceTree = "<group>"; };
		8975E589281ED164006F4F6A /* 1719.重构一棵树的方案数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1719.重构一棵树的方案数.cpp"; sourceTree = "<group>"; };
		8975E58A281ED164006F4F6A /* 1996.游戏中弱角色的数量.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1996.游戏中弱角色的数量.cpp"; sourceTree = "<group>"; };
		8975E58B281ED164006F4F6A /* 5866.数组的最大公因数排序.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5866.数组的最大公因数排序.cpp"; sourceTree = "<group>"; };
		8975E58C281ED164006F4F6A /* 382.链表随机节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "382.链表随机节点.cpp"; sourceTree = "<group>"; };
		8975E58D281ED164006F4F6A /* 1725.可以形成最大正方形的矩形数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1725.可以形成最大正方形的矩形数目.cpp"; sourceTree = "<group>"; };
		8975E58E281ED164006F4F6A /* 383.赎金信.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "383.赎金信.cpp"; sourceTree = "<group>"; };
		8975E58F281ED164006F4F6A /* 146.lru-缓存机制.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "146.lru-缓存机制.cpp"; sourceTree = "<group>"; };
		8975E590281ED164006F4F6A /* 219.存在重复元素-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "219.存在重复元素-ii.cpp"; sourceTree = "<group>"; };
		8975E591281ED164006F4F6A /* 2055.蜡烛之间的盘子.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2055.蜡烛之间的盘子.cpp"; sourceTree = "<group>"; };
		8975E592281ED164006F4F6A /* 341.扁平化嵌套列表迭代器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "341.扁平化嵌套列表迭代器.cpp"; sourceTree = "<group>"; };
		8975E593281ED164006F4F6A /* 1305.两棵二叉搜索树中的所有元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1305.两棵二叉搜索树中的所有元素.cpp"; sourceTree = "<group>"; };
		8975E594281ED164006F4F6A /* 5851.找出不同的二进制字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5851.找出不同的二进制字符串.cpp"; sourceTree = "<group>"; };
		8975E595281ED165006F4F6A /* 412.fizz-buzz.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "412.fizz-buzz.cpp"; sourceTree = "<group>"; };
		8975E596281ED165006F4F6A /* 5853.从子集的和还原数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5853.从子集的和还原数组.cpp"; sourceTree = "<group>"; };
		8975E597281ED165006F4F6A /* 884.两句话中的不常见单词.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "884.两句话中的不常见单词.cpp"; sourceTree = "<group>"; };
		8975E598281ED165006F4F6A /* 458.可怜的小猪.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "458.可怜的小猪.cpp"; sourceTree = "<group>"; };
		8975E599281ED165006F4F6A /* 5840.使字符串平衡的最小交换次数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5840.使字符串平衡的最小交换次数.cpp"; sourceTree = "<group>"; };
		8975E59A281ED166006F4F6A /* 590.n-叉树的后序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "590.n-叉树的后序遍历.cpp"; sourceTree = "<group>"; };
		8975E59B281ED166006F4F6A /* 215.数组中的第k个最大元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "215.数组中的第k个最大元素.cpp"; sourceTree = "<group>"; };
		8975E59C281ED166006F4F6A /* 101.对称二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "101.对称二叉树.cpp"; sourceTree = "<group>"; };
		8975E59D281ED166006F4F6A /* 520.检测大写字母.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "520.检测大写字母.cpp"; sourceTree = "<group>"; };
		8975E59E281ED166006F4F6A /* 1576.替换所有的问号.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1576.替换所有的问号.cpp"; sourceTree = "<group>"; };
		8975E59F281ED166006F4F6A /* 503.下一个更大元素-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "503.下一个更大元素-ii.cpp"; sourceTree = "<group>"; };
		8975E5A0281ED167006F4F6A /* 122.买卖股票的最佳时机-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "122.买卖股票的最佳时机-ii.cpp"; sourceTree = "<group>"; };
		8975E5A1281ED167006F4F6A /* 600.不含连续-1-的非负整数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "600.不含连续-1-的非负整数.cpp"; sourceTree = "<group>"; };
		8975E5A2281ED167006F4F6A /* 693.交替位二进制数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "693.交替位二进制数.cpp"; sourceTree = "<group>"; };
		8975E5A3281ED167006F4F6A /* 506.相对名次.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "506.相对名次.cpp"; sourceTree = "<group>"; };
		8975E5A4281ED167006F4F6A /* 1185.一周中的第几天.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1185.一周中的第几天.cpp"; sourceTree = "<group>"; };
		8975E5A5281ED167006F4F6A /* 1373.二叉搜索子树的最大键值和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1373.二叉搜索子树的最大键值和.cpp"; sourceTree = "<group>"; };
		8975E5A6281ED168006F4F6A /* 502.ipo.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = 502.ipo.cpp; sourceTree = "<group>"; };
		8975E5A7281ED168006F4F6A /* 1705.吃苹果的最大数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1705.吃苹果的最大数目.cpp"; sourceTree = "<group>"; };
		8975E5A8281ED168006F4F6A /* 334.递增的三元子序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "334.递增的三元子序列.cpp"; sourceTree = "<group>"; };
		8975E5A9281ED168006F4F6A /* 121.买卖股票的最佳时机.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "121.买卖股票的最佳时机.cpp"; sourceTree = "<group>"; };
		8975E5AA281ED168006F4F6A /* 1716.计算力扣银行的钱.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1716.计算力扣银行的钱.cpp"; sourceTree = "<group>"; };
		8975E5AB281ED169006F4F6A /* 301.删除无效的括号.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "301.删除无效的括号.cpp"; sourceTree = "<group>"; };
		8975E5AC281ED169006F4F6A /* 423.从英文中重建数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "423.从英文中重建数字.cpp"; sourceTree = "<group>"; };
		8975E5AD281ED169006F4F6A /* 2013.检测正方形.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2013.检测正方形.cpp"; sourceTree = "<group>"; };
		8975E5AE281ED169006F4F6A /* 105.从前序与中序遍历序列构造二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "105.从前序与中序遍历序列构造二叉树.cpp"; sourceTree = "<group>"; };
		8975E5AF281ED169006F4F6A /* 316.去除重复字母.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "316.去除重复字母.cpp"; sourceTree = "<group>"; };
		8975E5B0281ED16A006F4F6A /* 226.翻转二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "226.翻转二叉树.cpp"; sourceTree = "<group>"; };
		8975E5B1281ED16A006F4F6A /* 1405.最长快乐字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1405.最长快乐字符串.cpp"; sourceTree = "<group>"; };
		8975E5B2281ED16A006F4F6A /* 441.排列硬币.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "441.排列硬币.cpp"; sourceTree = "<group>"; };
		8975E5B3281ED16A006F4F6A /* 3.无重复字符的最长子串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "3.无重复字符的最长子串.cpp"; sourceTree = "<group>"; };
		8975E5B4281ED16A006F4F6A /* 519.随机翻转矩阵.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "519.随机翻转矩阵.cpp"; sourceTree = "<group>"; };
		8975E5B5281ED16B006F4F6A /* 504.七进制数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "504.七进制数.cpp"; sourceTree = "<group>"; };
		8975E5B6281ED16B006F4F6A /* 292.nim-游戏.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "292.nim-游戏.cpp"; sourceTree = "<group>"; };
		8975E5B7281ED16B006F4F6A /* 1034.边框着色.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1034.边框着色.cpp"; sourceTree = "<group>"; };
		8975E5B8281ED16B006F4F6A /* 1221.分割平衡字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1221.分割平衡字符串.cpp"; sourceTree = "<group>"; };
		8975E5B9281ED16B006F4F6A /* 1614.括号的最大嵌套深度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1614.括号的最大嵌套深度.cpp"; sourceTree = "<group>"; };
		8975E5BA281ED16B006F4F6A /* 2029.石子游戏-ix.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2029.石子游戏-ix.cpp"; sourceTree = "<group>"; };
		8975E5BB281ED16B006F4F6A /* 99.恢复二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "99.恢复二叉搜索树.cpp"; sourceTree = "<group>"; };
		8975E5BC281ED16C006F4F6A /* 375.猜数字大小-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "375.猜数字大小-ii.cpp"; sourceTree = "<group>"; };
		8975E5BD281ED16C006F4F6A /* 639.解码方法-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "639.解码方法-ii.cpp"; sourceTree = "<group>"; };
		8975E5BE281ED16C006F4F6A /* 1601.最多可达成的换楼请求数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1601.最多可达成的换楼请求数目.cpp"; sourceTree = "<group>"; };
		8975E5BF281ED16C006F4F6A /* 96.不同的二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "96.不同的二叉搜索树.cpp"; sourceTree = "<group>"; };
		8975E5C0281ED16C006F4F6A /* 166.分数到小数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "166.分数到小数.cpp"; sourceTree = "<group>"; };
		8975E5C1281ED16D006F4F6A /* Google_1.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = Google_1.cpp; sourceTree = "<group>"; };
		8975E5C2281ED16D006F4F6A /* 71.简化路径.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "71.简化路径.cpp"; sourceTree = "<group>"; };
		8975E5C3281ED16D006F4F6A /* 851.喧闹和富有.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "851.喧闹和富有.cpp"; sourceTree = "<group>"; };
		8975E5C4281ED16D006F4F6A /* 686.重复叠加字符串匹配.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "686.重复叠加字符串匹配.cpp"; sourceTree = "<group>"; };
		8975E5C5281ED16D006F4F6A /* 373.查找和最小的k对数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "373.查找和最小的k对数字.cpp"; sourceTree = "<group>"; };
		8975E5C6281ED16D006F4F6A /* 188.买卖股票的最佳时机-iv.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "188.买卖股票的最佳时机-iv.cpp"; sourceTree = "<group>"; };
		8975E5C7281ED16E006F4F6A /* 594.最长和谐子序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "594.最长和谐子序列.cpp"; sourceTree = "<group>"; };
		8975E5C8281ED16E006F4F6A /* 654.最大二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "654.最大二叉树.cpp"; sourceTree = "<group>"; };
		8975E5C9281ED16E006F4F6A /* 2044.统计按位或能得到最大值的子集数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2044.统计按位或能得到最大值的子集数目.cpp"; sourceTree = "<group>"; };
		8975E5CA281ED16E006F4F6A /* 141.环形链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "141.环形链表.cpp"; sourceTree = "<group>"; };
		8975E5CB281ED16E006F4F6A /* 5187_收集足够苹果的最小花园周长.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5187_收集足够苹果的最小花园周长.cpp"; sourceTree = "<group>"; };
		8975E5CC281ED16F006F4F6A /* 859.亲密字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "859.亲密字符串.cpp"; sourceTree = "<group>"; };
		8975E5CD281ED16F006F4F6A /* TreeNode.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = TreeNode.cpp; sourceTree = "<group>"; };
		8975E5CE281ED16F006F4F6A /* UnionFind.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = UnionFind.h; sourceTree = "<group>"; };
		8975E5CF281ED16F006F4F6A /* 630.课程表-iii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "630.课程表-iii.cpp"; sourceTree = "<group>"; };
		8975E5D0281ED16F006F4F6A /* 203.移除链表元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "203.移除链表元素.cpp"; sourceTree = "<group>"; };
		8975E5D1281ED170006F4F6A /* 908.最小差值-i.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "908.最小差值-i.cpp"; sourceTree = "<group>"; };
		8975E5D2281ED170006F4F6A /* 701.二叉搜索树中的插入操作.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "701.二叉搜索树中的插入操作.cpp"; sourceTree = "<group>"; };
		8975E5D3281ED170006F4F6A /* 475.供暖器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "475.供暖器.cpp"; sourceTree = "<group>"; };
		8975E5D4281ED170006F4F6A /* 710.黑名单中的随机数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "710.黑名单中的随机数.cpp"; sourceTree = "<group>"; };
		8975E5D5281ED170006F4F6A /* 725.分隔链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "725.分隔链表.cpp"; sourceTree = "<group>"; };
		8975E5D6281ED171006F4F6A /* 5864.游戏中弱角色的数量.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5864.游戏中弱角色的数量.cpp"; sourceTree = "<group>"; };
		8975E5D7281ED171006F4F6A /* 223.矩形面积.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "223.矩形面积.cpp"; sourceTree = "<group>"; };
		8975E5D8281ED171006F4F6A /* 673.最长递增子序列的个数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "673.最长递增子序列的个数.cpp"; sourceTree = "<group>"; };
		8975E5D9281ED171006F4F6A /* 391.完美矩形.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "391.完美矩形.cpp"; sourceTree = "<group>"; };
		8975E5DA281ED171006F4F6A /* 380.o-1-时间插入、删除和获取随机元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "380.o-1-时间插入、删除和获取随机元素.cpp"; sourceTree = "<group>"; };
		8975E5DB281ED171006F4F6A /* 969.煎饼排序.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "969.煎饼排序.cpp"; sourceTree = "<group>"; };
		8975E5DC281ED172006F4F6A /* 1688.比赛中的配对次数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1688.比赛中的配对次数.cpp"; sourceTree = "<group>"; };
		8975E5DD281ED172006F4F6A /* 1220.统计元音字母序列的数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1220.统计元音字母序列的数目.cpp"; sourceTree = "<group>"; };
		8975E5DE281ED172006F4F6A /* 1005.k-次取反后最大化的数组和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1005.k-次取反后最大化的数组和.cpp"; sourceTree = "<group>"; };
		8975E5DF281ED172006F4F6A /* 638.大礼包.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "638.大礼包.cpp"; sourceTree = "<group>"; };
		8975E5E0281ED172006F4F6A /* 83.删除排序链表中的重复元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "83.删除排序链表中的重复元素.cpp"; sourceTree = "<group>"; };
		8975E5E1281ED172006F4F6A /* 306.累加数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "306.累加数.cpp"; sourceTree = "<group>"; };
		8975E5E2281ED173006F4F6A /* 875.爱吃香蕉的珂珂.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "875.爱吃香蕉的珂珂.cpp"; sourceTree = "<group>"; };
		8975E5E3281ED173006F4F6A /* 990.等式方程的可满足性.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "990.等式方程的可满足性.cpp"; sourceTree = "<group>"; };
		8975E5E4281ED173006F4F6A /* 661.图片平滑器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "661.图片平滑器.cpp"; sourceTree = "<group>"; };
		8975E5E5281ED173006F4F6A /* 997.找到小镇的法官.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "997.找到小镇的法官.cpp"; sourceTree = "<group>"; };
		8975E5E6281ED173006F4F6A /* 211.添加与搜索单词-数据结构设计-1.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "211.添加与搜索单词-数据结构设计-1.cpp"; sourceTree = "<group>"; };
		8975E5E7281ED174006F4F6A /* 104.二叉树的最大深度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "104.二叉树的最大深度.cpp"; sourceTree = "<group>"; };
		8975E5E8281ED174006F4F6A /* 700.二叉搜索树中的搜索.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "700.二叉搜索树中的搜索.cpp"; sourceTree = "<group>"; };
		8975E5E9281ED174006F4F6A /* 1296.划分数组为连续数字的集合.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1296.划分数组为连续数字的集合.cpp"; sourceTree = "<group>"; };
		8975E5EA281ED174006F4F6A /* 11.盛最多水的容器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "11.盛最多水的容器.cpp"; sourceTree = "<group>"; };
		8975E5EB281ED174006F4F6A /* 1081.不同字符的最小子序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1081.不同字符的最小子序列.cpp"; sourceTree = "<group>"; };
		8975E5EC281ED174006F4F6A /* 437.路径总和-iii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "437.路径总和-iii.cpp"; sourceTree = "<group>"; };
		8975E5ED281ED175006F4F6A /* 2045.到达目的地的第二短时间.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2045.到达目的地的第二短时间.cpp"; sourceTree = "<group>"; };
		8975E5EE281ED175006F4F6A /* 482.密钥格式化.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "482.密钥格式化.cpp"; sourceTree = "<group>"; };
		8975E5EF281ED175006F4F6A /* 876.链表的中间结点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "876.链表的中间结点.cpp"; sourceTree = "<group>"; };
		8975E5F0281ED175006F4F6A /* 38.外观数列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "38.外观数列.cpp"; sourceTree = "<group>"; };
		8975E5F1281ED176006F4F6A /* 430.扁平化多级双向链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "430.扁平化多级双向链表.cpp"; sourceTree = "<group>"; };
		8975E5F2281ED176006F4F6A /* 212.单词搜索-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "212.单词搜索-ii.cpp"; sourceTree = "<group>"; };
		8975E5F3281ED176006F4F6A /* 606.根据二叉树创建字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "606.根据二叉树创建字符串.cpp"; sourceTree = "<group>"; };
		8975E5F4281ED176006F4F6A /* 496.下一个更大元素-i.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "496.下一个更大元素-i.cpp"; sourceTree = "<group>"; };
		8975E5F5281ED176006F4F6A /* 400.第-n-位数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "400.第-n-位数字.cpp"; sourceTree = "<group>"; };
		8975E5F6281ED176006F4F6A /* 124.二叉树中的最大路径和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "124.二叉树中的最大路径和.cpp"; sourceTree = "<group>"; };
		8975E5F7281ED176006F4F6A /* 539.最小时间差.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "539.最小时间差.cpp"; sourceTree = "<group>"; };
		8975E5F8281ED177006F4F6A /* 507.完美数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "507.完美数.cpp"; sourceTree = "<group>"; };
		8975E5F9281ED177006F4F6A /* 229.求众数-ii-1.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "229.求众数-ii-1.cpp"; sourceTree = "<group>"; };
		8975E5FA281ED177006F4F6A /* 397.整数替换.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "397.整数替换.cpp"; sourceTree = "<group>"; };
		8975E5FB281ED177006F4F6A /* 416.分割等和子集.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "416.分割等和子集.cpp"; sourceTree = "<group>"; };
		8975E5FC281ED177006F4F6A /* 564.寻找最近的回文数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "564.寻找最近的回文数.cpp"; sourceTree = "<group>"; };
		8975E5FD281ED178006F4F6A /* 344.反转字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "344.反转字符串.cpp"; sourceTree = "<group>"; };
		8975E5FE281ED178006F4F6A /* 1994.好子集的数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1994.好子集的数目.cpp"; sourceTree = "<group>"; };
		8975E5FF281ED178006F4F6A /* 240.搜索二维矩阵-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "240.搜索二维矩阵-ii.cpp"; sourceTree = "<group>"; };
		8975E600281ED178006F4F6A /* 225.用队列实现栈.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "225.用队列实现栈.cpp"; sourceTree = "<group>"; };
		8975E601281ED178006F4F6A /* 297.二叉树的序列化与反序列化.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "297.二叉树的序列化与反序列化.cpp"; sourceTree = "<group>"; };
		8975E602281ED178006F4F6A /* 367.有效的完全平方数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "367.有效的完全平方数.cpp"; sourceTree = "<group>"; };
		8975E603281ED179006F4F6A /* 258.各位相加.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "258.各位相加.cpp"; sourceTree = "<group>"; };
		8975E604281ED179006F4F6A /* 451.根据字符出现频率排序.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "451.根据字符出现频率排序.cpp"; sourceTree = "<group>"; };
		8975E605281ED179006F4F6A /* 76.最小覆盖子串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "76.最小覆盖子串.cpp"; sourceTree = "<group>"; };
		8975E606281ED179006F4F6A /* 222.完全二叉树的节点个数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "222.完全二叉树的节点个数.cpp"; sourceTree = "<group>"; };
		8975E607281ED179006F4F6A /* 704.二分查找.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "704.二分查找.cpp"; sourceTree = "<group>"; };
		8975E608281ED179006F4F6A /* 309.最佳买卖股票时机含冷冻期.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "309.最佳买卖股票时机含冷冻期.cpp"; sourceTree = "<group>"; };
		8975E609281ED17A006F4F6A /* 720.词典中最长的单词.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "720.词典中最长的单词.cpp"; sourceTree = "<group>"; };
		8975E60A281ED17A006F4F6A /* 798.得分最高的最小轮调.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "798.得分最高的最小轮调.cpp"; sourceTree = "<group>"; };
		8975E60B281ED17A006F4F6A /* 92.反转链表-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "92.反转链表-ii.cpp"; sourceTree = "<group>"; };
		8975E60C281ED17A006F4F6A /* 5845.你能穿过矩阵的最后一天.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5845.你能穿过矩阵的最后一天.cpp"; sourceTree = "<group>"; };
		8975E60D281ED17A006F4F6A /* 295.数据流的中位数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "295.数据流的中位数.cpp"; sourceTree = "<group>"; };
		8975E60E281ED17B006F4F6A /* 34.在排序数组中查找元素的第一个和最后一个位置.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "34.在排序数组中查找元素的第一个和最后一个位置.cpp"; sourceTree = "<group>"; };
		8975E60F281ED17B006F4F6A /* 36.有效的数独.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "36.有效的数独.cpp"; sourceTree = "<group>"; };
		8975E610281ED17B006F4F6A /* 260.只出现一次的数字-iii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "260.只出现一次的数字-iii.cpp"; sourceTree = "<group>"; };
		8975E611281ED17B006F4F6A /* 1748.唯一元素的和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1748.唯一元素的和.cpp"; sourceTree = "<group>"; };
		8975E612281ED17B006F4F6A /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
		8975E613281ED17C006F4F6A /* 239.滑动窗口最大值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "239.滑动窗口最大值.cpp"; sourceTree = "<group>"; };
		8975E614281ED17C006F4F6A /* 419.甲板上的战舰.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "419.甲板上的战舰.cpp"; sourceTree = "<group>"; };
		8975E615281ED17C006F4F6A /* 191.位-1-的个数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "191.位-1-的个数.cpp"; sourceTree = "<group>"; };
		8975E616281ED17C006F4F6A /* 432.全-o-1-的数据结构.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "432.全-o-1-的数据结构.cpp"; sourceTree = "<group>"; };
		8975E617281ED17C006F4F6A /* 232.用栈实现队列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "232.用栈实现队列.cpp"; sourceTree = "<group>"; };
		8975E618281ED17C006F4F6A /* 372.超级次方.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "372.超级次方.cpp"; sourceTree = "<group>"; };
		8975E619281ED17D006F4F6A /* 89.格雷编码.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "89.格雷编码.cpp"; sourceTree = "<group>"; };
		8975E61A281ED17D006F4F6A /* 172.阶乘后的零.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "172.阶乘后的零.cpp"; sourceTree = "<group>"; };
		8975E61B281ED17D006F4F6A /* 794.有效的井字游戏.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "794.有效的井字游戏.cpp"; sourceTree = "<group>"; };
		8975E61C281ED17D006F4F6A /* 2024.考试的最大困扰度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2024.考试的最大困扰度.cpp"; sourceTree = "<group>"; };
		8975E61D281ED17D006F4F6A /* 98.验证二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "98.验证二叉搜索树.cpp"; sourceTree = "<group>"; };
		8975E61E281ED17D006F4F6A /* 冒泡排序.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "冒泡排序.cpp"; sourceTree = "<group>"; };
		8975E61F281ED17E006F4F6A /* ListNode.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ListNode.h; sourceTree = "<group>"; };
		8975E620281ED17E006F4F6A /* 145.二叉树的后序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "145.二叉树的后序遍历.cpp"; sourceTree = "<group>"; };
		8975E621281ED17E006F4F6A /* 102.二叉树的层序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "102.二叉树的层序遍历.cpp"; sourceTree = "<group>"; };
		8975E622281ED17E006F4F6A /* 653.两数之和-iv-输入-bst.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "653.两数之和-iv-输入-bst.cpp"; sourceTree = "<group>"; };
		8975E623281ED17E006F4F6A /* 521.最长特殊序列-ⅰ.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "521.最长特殊序列-ⅰ.cpp"; sourceTree = "<group>"; };
		8975E624281ED17F006F4F6A /* 1038.把二叉搜索树转换为累加树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1038.把二叉搜索树转换为累加树.cpp"; sourceTree = "<group>"; };
		8975E625281ED17F006F4F6A /* 1816.截断句子.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1816.截断句子.cpp"; sourceTree = "<group>"; };
		8975E626281ED17F006F4F6A /* 5844.数组元素的最小非零乘积.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5844.数组元素的最小非零乘积.cpp"; sourceTree = "<group>"; };
		8975E627281ED17F006F4F6A /* 144.二叉树的前序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "144.二叉树的前序遍历.cpp"; sourceTree = "<group>"; };
		8975E628281ED17F006F4F6A /* 440.字典序的第k小数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "440.字典序的第k小数字.cpp"; sourceTree = "<group>"; };
		8975E629281ED180006F4F6A /* 524.通过删除字母匹配到字典里最长单词.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "524.通过删除字母匹配到字典里最长单词.cpp"; sourceTree = "<group>"; };
		8975E62A281ED180006F4F6A /* ListNode.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = ListNode.cpp; sourceTree = "<group>"; };
		8975E62B281ED180006F4F6A /* 198.打家劫舍.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "198.打家劫舍.cpp"; sourceTree = "<group>"; };
		8975E62C281ED180006F4F6A /* 5854.学生分数的最小差值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5854.学生分数的最小差值.cpp"; sourceTree = "<group>"; };
		8975E62D281ED180006F4F6A /* 1.两数之和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1.两数之和.cpp"; sourceTree = "<group>"; };
		8975E62E281ED180006F4F6A /* 650.只有两个键的键盘.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "650.只有两个键的键盘.cpp"; sourceTree = "<group>"; };
		8975E62F281ED181006F4F6A /* 652.寻找重复的子树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "652.寻找重复的子树.cpp"; sourceTree = "<group>"; };
		8975E630281ED181006F4F6A /* 322.零钱兑换.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "322.零钱兑换.cpp"; sourceTree = "<group>"; };
		8975E631281ED181006F4F6A /* 599.两个列表的最小索引总和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "599.两个列表的最小索引总和.cpp"; sourceTree = "<group>"; };
		8975E632281ED181006F4F6A /* 349.两个数组的交集.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "349.两个数组的交集.cpp"; sourceTree = "<group>"; };
		8975E633281ED181006F4F6A /* 938.二叉搜索树的范围和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "938.二叉搜索树的范围和.cpp"; sourceTree = "<group>"; };
		8975E634281ED182006F4F6A /* 1436.旅行终点站.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1436.旅行终点站.cpp"; sourceTree = "<group>"; };
		8975E635281ED182006F4F6A /* 114.二叉树展开为链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "114.二叉树展开为链表.cpp"; sourceTree = "<group>"; };
		8975E636281ED182006F4F6A /* 870.优势洗牌.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "870.优势洗牌.cpp"; sourceTree = "<group>"; };
		8975E637281ED182006F4F6A /* 1332.删除回文子序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1332.删除回文子序列.cpp"; sourceTree = "<group>"; };
		8975E638281ED182006F4F6A /* 1606.找到处理最多请求的服务器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1606.找到处理最多请求的服务器.cpp"; sourceTree = "<group>"; };
		8975E639281ED182006F4F6A /* 2049.统计最高分的节点数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2049.统计最高分的节点数目.cpp"; sourceTree = "<group>"; };
		8975E63A281ED183006F4F6A /* 5850.找出数组的最大公约数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5850.找出数组的最大公约数.cpp"; sourceTree = "<group>"; };
		8975E63B281ED183006F4F6A /* 29.两数相除.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "29.两数相除.cpp"; sourceTree = "<group>"; };
		8975E63C281ED183006F4F6A /* 689.三个无重叠子数组的最大和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "689.三个无重叠子数组的最大和.cpp"; sourceTree = "<group>"; };
		8975E63D281ED183006F4F6A /* 762.二进制表示中质数个计算置位.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "762.二进制表示中质数个计算置位.cpp"; sourceTree = "<group>"; };
		8975E63E281ED183006F4F6A /* 15.三数之和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "15.三数之和.cpp"; sourceTree = "<group>"; };
		8975E63F281ED183006F4F6A /* 299.猜数字游戏.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "299.猜数字游戏.cpp"; sourceTree = "<group>"; };
		8975E640281ED184006F4F6A /* 2.两数相加.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2.两数相加.cpp"; sourceTree = "<group>"; };
		8975E641281ED184006F4F6A /* 2016.增量元素之间的最大差值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2016.增量元素之间的最大差值.cpp"; sourceTree = "<group>"; };
		8975E642281ED184006F4F6A /* 230.二叉搜索树中第k小的元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "230.二叉搜索树中第k小的元素.cpp"; sourceTree = "<group>"; };
		8975E643281ED184006F4F6A /* 283.移动零.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "283.移动零.cpp"; sourceTree = "<group>"; };
		8975E644281ED184006F4F6A /* 面试题17.14.最小K个数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "面试题17.14.最小K个数.cpp"; sourceTree = "<group>"; };
		8975E645281ED184006F4F6A /* 1518.换酒问题.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1518.换酒问题.cpp"; sourceTree = "<group>"; };
		8975E646281ED184006F4F6A /* 714.买卖股票的最佳时机含手续费.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "714.买卖股票的最佳时机含手续费.cpp"; sourceTree = "<group>"; };
		8975E647281ED185006F4F6A /* 130.被围绕的区域.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "130.被围绕的区域.cpp"; sourceTree = "<group>"; };
		8975E648281ED185006F4F6A /* 476.数字的补数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "476.数字的补数.cpp"; sourceTree = "<group>"; };
		8975E649281ED185006F4F6A /* 797.所有可能的路径.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "797.所有可能的路径.cpp"; sourceTree = "<group>"; };
		8975E64A281ED185006F4F6A /* 1011.在-d-天内送达包裹的能力.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1011.在-d-天内送达包裹的能力.cpp"; sourceTree = "<group>"; };
		8975E64B281ED185006F4F6A /* 319.灯泡开关.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "319.灯泡开关.cpp"; sourceTree = "<group>"; };
		8975E64C281ED185006F4F6A /* 25.k-个一组翻转链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "25.k-个一组翻转链表.cpp"; sourceTree = "<group>"; };
		8975E64D281ED185006F4F6A /* 173.二叉搜索树迭代器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "173.二叉搜索树迭代器.cpp"; sourceTree = "<group>"; };
		8975E64E281ED185006F4F6A /* 2000.反转单词前缀.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2000.反转单词前缀.cpp"; sourceTree = "<group>"; };
		8975E64F281ED186006F4F6A /* 106.从中序与后序遍历序列构造二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "106.从中序与后序遍历序列构造二叉树.cpp"; sourceTree = "<group>"; };
		8975E650281ED186006F4F6A /* 913.猫和老鼠.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "913.猫和老鼠.cpp"; sourceTree = "<group>"; };
		8975E651281ED186006F4F6A /* 438.找到字符串中所有字母异位词.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "438.找到字符串中所有字母异位词.cpp"; sourceTree = "<group>"; };
		8975E652281ED186006F4F6A /* 537.复数乘法.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "537.复数乘法.cpp"; sourceTree = "<group>"; };
		8975E653281ED186006F4F6A /* 682.棒球比赛.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "682.棒球比赛.cpp"; sourceTree = "<group>"; };
		8975E654281ED186006F4F6A /* 407.接雨水-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "407.接雨水-ii.cpp"; sourceTree = "<group>"; };
		8975E655281ED186006F4F6A /* 1143.最长公共子序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1143.最长公共子序列.cpp"; sourceTree = "<group>"; };
		8975E656281ED186006F4F6A /* 234.回文链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "234.回文链表.cpp"; sourceTree = "<group>"; };
		8975E657281ED187006F4F6A /* 559.n-叉树的最大深度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "559.n-叉树的最大深度.cpp"; sourceTree = "<group>"; };
		8975E658281ED187006F4F6A /* 2039.网络空闲的时刻.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2039.网络空闲的时刻.cpp"; sourceTree = "<group>"; };
		8975E659281ED187006F4F6A /* 517.超级洗衣机.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "517.超级洗衣机.cpp"; sourceTree = "<group>"; };
		8975E65A281ED187006F4F6A /* 142.环形链表-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "142.环形链表-ii.cpp"; sourceTree = "<group>"; };
		8975E65B281ED187006F4F6A /* 492.构造矩形.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "492.构造矩形.cpp"; sourceTree = "<group>"; };
		8975E65C281ED187006F4F6A /* 495.提莫攻击.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "495.提莫攻击.cpp"; sourceTree = "<group>"; };
		8975E65D281ED187006F4F6A /* 1609.奇偶树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1609.奇偶树.cpp"; sourceTree = "<group>"; };
		8975E65E281ED187006F4F6A /* 1984.学生分数的最小差值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1984.学生分数的最小差值.cpp"; sourceTree = "<group>"; };
		8975E65F281ED188006F4F6A /* 677.键值映射.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "677.键值映射.cpp"; sourceTree = "<group>"; };
		8975E660281ED188006F4F6A /* 856.括号的分数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "856.括号的分数.cpp"; sourceTree = "<group>"; };
		8975E661281ED188006F4F6A /* 2038.如果相邻两个颜色均相同则删除当前颜色.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2038.如果相邻两个颜色均相同则删除当前颜色.cpp"; sourceTree = "<group>"; };
		8975E662281ED188006F4F6A /* 1078.bigram-分词.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1078.bigram-分词.cpp"; sourceTree = "<group>"; };
		8975E663281ED188006F4F6A /* 472.连接词.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "472.连接词.cpp"; sourceTree = "<group>"; };
		8975E664281ED188006F4F6A /* 2100.适合打劫银行的日子.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2100.适合打劫银行的日子.cpp"; sourceTree = "<group>"; };
		8975E665281ED188006F4F6A /* 167.两数之和-ii-输入有序数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "167.两数之和-ii-输入有序数组.cpp"; sourceTree = "<group>"; };
		8975E666281ED188006F4F6A /* 20.有效的括号.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "20.有效的括号.cpp"; sourceTree = "<group>"; };
		8975E667281ED189006F4F6A /* 589.n-叉树的前序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "589.n-叉树的前序遍历.cpp"; sourceTree = "<group>"; };
		8975E668281ED189006F4F6A /* 1414.和为-k-的最少斐波那契数字数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1414.和为-k-的最少斐波那契数字数目.cpp"; sourceTree = "<group>"; };
		8975E669281ED189006F4F6A /* 786.第-k-个最小的素数分数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "786.第-k-个最小的素数分数.cpp"; sourceTree = "<group>"; };
		8975E66A281ED189006F4F6A /* 5838.检查字符串是否为数组前缀.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5838.检查字符串是否为数组前缀.cpp"; sourceTree = "<group>"; };
		8975E66B281ED189006F4F6A /* 5856.完成任务的最少工作时间段.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5856.完成任务的最少工作时间段.cpp"; sourceTree = "<group>"; };
		8975E66C281ED189006F4F6A /* 384.打乱数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "384.打乱数组.cpp"; sourceTree = "<group>"; };
		8975E66D281ED189006F4F6A /* 6.z-字形变换.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "6.z-字形变换.cpp"; sourceTree = "<group>"; };
		8975E66E281ED189006F4F6A /* 318.最大单词长度乘积.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "318.最大单词长度乘积.cpp"; sourceTree = "<group>"; };
		8975E66F281ED18A006F4F6A /* 717.1-比特与-2-比特字符.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "717.1-比特与-2-比特字符.cpp"; sourceTree = "<group>"; };
		8975E670281ED18A006F4F6A /* 284.顶端迭代器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "284.顶端迭代器.cpp"; sourceTree = "<group>"; };
		8975E671281ED18A006F4F6A /* 1189.气球-的最大数量.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1189.气球-的最大数量.cpp"; sourceTree = "<group>"; };
		8975E672281ED18A006F4F6A /* 709.转换成小写字母.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "709.转换成小写字母.cpp"; sourceTree = "<group>"; };
		8975E673281ED18A006F4F6A /* 1995.统计特殊四元组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1995.统计特殊四元组.cpp"; sourceTree = "<group>"; };
		8975E674281ED18A006F4F6A /* 2104.子数组范围和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2104.子数组范围和.cpp"; sourceTree = "<group>"; };
		8975E675281ED18A006F4F6A /* 4.寻找两个正序数组的中位数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "4.寻找两个正序数组的中位数.cpp"; sourceTree = "<group>"; };
		8975E676281ED18B006F4F6A /* 1044.最长重复子串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1044.最长重复子串.cpp"; sourceTree = "<group>"; };
		8975E677281ED18B006F4F6A /* 371.两整数之和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "371.两整数之和.cpp"; sourceTree = "<group>"; };
		8975E678281ED18B006F4F6A /* 剑指 Offer II 069.山峰数组的顶部.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer II 069.山峰数组的顶部.cpp"; sourceTree = "<group>"; };
		8975E679281ED18B006F4F6A /* 326.3-的幂.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "326.3-的幂.cpp"; sourceTree = "<group>"; };
		8975E67A281ED18B006F4F6A /* 5832.构造元素不等于两相邻元素平均值的数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5832.构造元素不等于两相邻元素平均值的数组.cpp"; sourceTree = "<group>"; };
		8975E67B281ED18B006F4F6A /* 23.合并k个升序链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "23.合并k个升序链表.cpp"; sourceTree = "<group>"; };
		8975E67C281ED18B006F4F6A /* 889.根据前序和后序遍历构造二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "889.根据前序和后序遍历构造二叉树.cpp"; sourceTree = "<group>"; };
		8975E67D281ED18B006F4F6A /* 282.给表达式添加运算符.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "282.给表达式添加运算符.cpp"; sourceTree = "<group>"; };
		8975E67E281ED18C006F4F6A /* 110.平衡二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "110.平衡二叉树.cpp"; sourceTree = "<group>"; };
		8975E67F281ED18C006F4F6A /* 410.分割数组的最大值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "410.分割数组的最大值.cpp"; sourceTree = "<group>"; };
		8975E680281ED18C006F4F6A /* 2034.股票价格波动.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2034.股票价格波动.cpp"; sourceTree = "<group>"; };
		8975E681281ED18C006F4F6A /* 450.删除二叉搜索树中的节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "450.删除二叉搜索树中的节点.cpp"; sourceTree = "<group>"; };
		8975E682281ED18C006F4F6A /* 187.重复的dna序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "187.重复的dna序列.cpp"; sourceTree = "<group>"; };
		8975E683281ED18C006F4F6A /* 540.有序数组中的单一元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "540.有序数组中的单一元素.cpp"; sourceTree = "<group>"; };
		8975E684281ED18C006F4F6A /* 21.合并两个有序链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "21.合并两个有序链表.cpp"; sourceTree = "<group>"; };
		8975E685281ED18C006F4F6A /* 352.将数据流变为多个不相交区间.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "352.将数据流变为多个不相交区间.cpp"; sourceTree = "<group>"; };
		8975E686281ED18D006F4F6A /* 1001.网格照明.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1001.网格照明.cpp"; sourceTree = "<group>"; };
		8975E687281ED18D006F4F6A /* 488.祖玛游戏.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "488.祖玛游戏.cpp"; sourceTree = "<group>"; };
		8975E688281ED18D006F4F6A /* 1763.最长的美好子字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1763.最长的美好子字符串.cpp"; sourceTree = "<group>"; };
		8975E689281ED18D006F4F6A /* 390.消除游戏.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "390.消除游戏.cpp"; sourceTree = "<group>"; };
		8975E68A281ED18D006F4F6A /* 7.整数反转.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "7.整数反转.cpp"; sourceTree = "<group>"; };
		8975E68B281ED18D006F4F6A /* 598.范围求和-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "598.范围求和-ii.cpp"; sourceTree = "<group>"; };
		8975E68C281ED18D006F4F6A /* 783.二叉搜索树节点最小距离.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "783.二叉搜索树节点最小距离.cpp"; sourceTree = "<group>"; };
		8975E68D281ED18D006F4F6A /* 5839.移除石子使总数最小.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5839.移除石子使总数最小.cpp"; sourceTree = "<group>"; };
		8975E68E281ED18E006F4F6A /* 237.删除链表中的节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "237.删除链表中的节点.cpp"; sourceTree = "<group>"; };
		8975E68F281ED18E006F4F6A /* 70.爬楼梯.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "70.爬楼梯.cpp"; sourceTree = "<group>"; };
		8975E690281ED18E006F4F6A /* 19.删除链表的倒数第-n-个结点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "19.删除链表的倒数第-n-个结点.cpp"; sourceTree = "<group>"; };
		8975E691281ED18E006F4F6A /* 335.路径交叉.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "335.路径交叉.cpp"; sourceTree = "<group>"; };
		8975E692281ED18E006F4F6A /* 1791.找出星型图的中心节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1791.找出星型图的中心节点.cpp"; sourceTree = "<group>"; };
		8975E693281ED18E006F4F6A /* 688.马-在棋盘上的概率.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "688.马-在棋盘上的概率.cpp"; sourceTree = "<group>"; };
		8975E694281ED18E006F4F6A /* 728.自除数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "728.自除数.cpp"; sourceTree = "<group>"; };
		8975E695281ED18F006F4F6A /* 954.二倍数对数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "954.二倍数对数组.cpp"; sourceTree = "<group>"; };
		8975E696281ED18F006F4F6A /* 1765.地图中的最高点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1765.地图中的最高点.cpp"; sourceTree = "<group>"; };
		8975E697281ED18F006F4F6A /* 5857.不同的好子序列数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5857.不同的好子序列数目.cpp"; sourceTree = "<group>"; };
		8975E698281ED18F006F4F6A /* 307.区域和检索-数组可修改.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "307.区域和检索-数组可修改.cpp"; sourceTree = "<group>"; };
		8975E699281ED18F006F4F6A /* 26.删除有序数组中的重复项.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "26.删除有序数组中的重复项.cpp"; sourceTree = "<group>"; };
		8975E69A281ED18F006F4F6A /* 224.基本计算器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "224.基本计算器.cpp"; sourceTree = "<group>"; };
		8975E69B281ED18F006F4F6A /* 509.斐波那契数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "509.斐波那契数.cpp"; sourceTree = "<group>"; };
		8975E69C281ED18F006F4F6A /* 1020.飞地的数量.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1020.飞地的数量.cpp"; sourceTree = "<group>"; };
		8975E69D281ED190006F4F6A /* 575.分糖果.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "575.分糖果.cpp"; sourceTree = "<group>"; };
		8975E69E281ED190006F4F6A /* 5381_你可以工作的最大周数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5381_你可以工作的最大周数.cpp"; sourceTree = "<group>"; };
		8975E69F281ED190006F4F6A /* 347.前-k-个高频元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "347.前-k-个高频元素.cpp"; sourceTree = "<group>"; };
		8975E6A0281ED190006F4F6A /* 94.二叉树的中序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "94.二叉树的中序遍历.cpp"; sourceTree = "<group>"; };
		8975E6A1281ED190006F4F6A /* 8.字符串转换整数-atoi.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "8.字符串转换整数-atoi.cpp"; sourceTree = "<group>"; };
		8975E6A2281ED190006F4F6A /* 2022.将一维数组转变成二维数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2022.将一维数组转变成二维数组.cpp"; sourceTree = "<group>"; };
		8975E6A3281ED190006F4F6A /* 739.每日温度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "739.每日温度.cpp"; sourceTree = "<group>"; };
		8975E6A4281ED191006F4F6A /* 538.把二叉搜索树转换为累加树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "538.把二叉搜索树转换为累加树.cpp"; sourceTree = "<group>"; };
		8975E6A5281ED191006F4F6A /* 846.一手顺子.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "846.一手顺子.cpp"; sourceTree = "<group>"; };
		8975E6A6281ED191006F4F6A /* 95.不同的二叉搜索树-ii.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "95.不同的二叉搜索树-ii.cpp"; sourceTree = "<group>"; };
		8975E6A7281ED191006F4F6A /* 108.将有序数组转换为二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "108.将有序数组转换为二叉搜索树.cpp"; sourceTree = "<group>"; };
		8975E6A8281ED191006F4F6A /* 1894.找到需要补充粉笔的学生编号.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1894.找到需要补充粉笔的学生编号.cpp"; sourceTree = "<group>"; };
		8975E6A9281ED191006F4F6A /* 393.utf-8-编码验证.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "393.utf-8-编码验证.cpp"; sourceTree = "<group>"; };
		8975E6AA281ED191006F4F6A /* 236.二叉树的最近公共祖先.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "236.二叉树的最近公共祖先.cpp"; sourceTree = "<group>"; };
		8975E6AB281ED191006F4F6A /* 2047.句子中的有效单词数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2047.句子中的有效单词数.cpp"; sourceTree = "<group>"; };
		8975E6AC281ED192006F4F6A /* 553.最优除法.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "553.最优除法.cpp"; sourceTree = "<group>"; };
		8975E6AD281ED192006F4F6A /* 1610.可见点的最大数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1610.可见点的最大数目.cpp"; sourceTree = "<group>"; };
		8975E6AE281ED192006F4F6A /* 1036.逃离大迷宫.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1036.逃离大迷宫.cpp"; sourceTree = "<group>"; };
		8975E6AF281ED192006F4F6A /* 1962.移除石子使总数最小.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1962.移除石子使总数最小.cpp"; sourceTree = "<group>"; };
		8975E6B0281ED192006F4F6A /* 807.保持城市天际线.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "807.保持城市天际线.cpp"; sourceTree = "<group>"; };
		8975E6B1281ED192006F4F6A /* 1345.跳跃游戏-iv.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1345.跳跃游戏-iv.cpp"; sourceTree = "<group>"; };
		8975E6B2281ED192006F4F6A /* UnionFind.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = UnionFind.cpp; sourceTree = "<group>"; };
		8975E6B3281ED192006F4F6A /* 747.至少是其他数字两倍的最大数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "747.至少是其他数字两倍的最大数.cpp"; sourceTree = "<group>"; };
		8975E6B4281ED192006F4F6A /* 5.最长回文子串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5.最长回文子串.cpp"; sourceTree = "<group>"; };
		8975E6B5281ED193006F4F6A /* 447.回旋镖的数量.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "447.回旋镖的数量.cpp"; sourceTree = "<group>"; };
		8975E6B6281ED193006F4F6A /* 273.整数转换英文表示.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "273.整数转换英文表示.cpp"; sourceTree = "<group>"; };
		8975E6B7281ED193006F4F6A /* 825.适龄的朋友.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "825.适龄的朋友.cpp"; sourceTree = "<group>"; };
		8975E6B8281ED193006F4F6A /* 2028.找出缺失的观测数据.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2028.找出缺失的观测数据.cpp"; sourceTree = "<group>"; };
		8975E6B9281ED193006F4F6A /* 68.文本左右对齐.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "68.文本左右对齐.cpp"; sourceTree = "<group>"; };
		8975E6BA281ED193006F4F6A /* 748.最短补全词.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "748.最短补全词.cpp"; sourceTree = "<group>"; };
		8975E6BB281ED193006F4F6A /* 1154.一年中的第几天.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1154.一年中的第几天.cpp"; sourceTree = "<group>"; };
		8975E6BC281ED194006F4F6A /* 838.推多米诺.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "838.推多米诺.cpp"; sourceTree = "<group>"; };
		8975E6BD281ED194006F4F6A /* 88.合并两个有序数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "88.合并两个有序数组.cpp"; sourceTree = "<group>"; };
		8975E6BE281ED194006F4F6A /* 5830_三除数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5830_三除数.cpp"; sourceTree = "<group>"; };
		8975E6BF281ED194006F4F6A /* 5852.最小化目标值与所选元素的差.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5852.最小化目标值与所选元素的差.cpp"; sourceTree = "<group>"; };
		8976631B273C1B2600507E1F /* 495.提莫攻击.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "495.提莫攻击.swift"; sourceTree = "<group>"; };
		89766320273D6A5600507E1F /* 629.k个逆序对数组.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "629.k个逆序对数组.swift"; sourceTree = "<group>"; };
		897A7ECD27FC7F480006B830 /* 762.二进制表示中质数个计算置位.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "762.二进制表示中质数个计算置位.swift"; sourceTree = "<group>"; };
		897A7ED127FC84710006B830 /* 191.位-1-的个数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "191.位-1-的个数.swift"; sourceTree = "<group>"; };
		8984640727A69483006D99B5 /* 884.两句话中的不常见单词.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "884.两句话中的不常见单词.swift"; sourceTree = "<group>"; };
		89886F45272C5A7E003A626D /* 347.前-k-个高频元素.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "347.前-k-个高频元素.swift"; sourceTree = "<group>"; };
		89886F47272C5DA1003A626D /* 451.根据字符出现频率排序.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "451.根据字符出现频率排序.swift"; sourceTree = "<group>"; };
		89886F49272C5E42003A626D /* 36.有效的数独.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "36.有效的数独.swift"; sourceTree = "<group>"; };
		89886F4C272C5EF5003A626D /* 349.两个数组的交集.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "349.两个数组的交集.swift"; sourceTree = "<group>"; };
		89886F4F272CDC20003A626D /* 88.合并两个有序数组.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "88.合并两个有序数组.swift"; sourceTree = "<group>"; };
		89886F51272CDCE6003A626D /* 509.斐波那契数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "509.斐波那契数.swift"; sourceTree = "<group>"; };
		89886F54272CDE00003A626D /* 20.有效的括号.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "20.有效的括号.swift"; sourceTree = "<group>"; };
		89886F56272CDF2D003A626D /* 150.逆波兰表达式求值.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "150.逆波兰表达式求值.swift"; sourceTree = "<group>"; };
		89886F58272CDFA2003A626D /* 224.基本计算器.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "224.基本计算器.swift"; sourceTree = "<group>"; };
		89886F5B272CE03E003A626D /* 225.用队列实现栈.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "225.用队列实现栈.swift"; sourceTree = "<group>"; };
		89886F5D272CE104003A626D /* 232.用栈实现队列.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "232.用栈实现队列.swift"; sourceTree = "<group>"; };
		89886F5F272CE174003A626D /* 856.括号的分数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "856.括号的分数.swift"; sourceTree = "<group>"; };
		89886F62272CE20B003A626D /* ListNode.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = ListNode.swift; sourceTree = "<group>"; };
		89886F64272CE221003A626D /* 21.合并两个有序链表.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "21.合并两个有序链表.swift"; sourceTree = "<group>"; };
		89886F67272CE4B9003A626D /* 23.合并k个升序链表.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "23.合并k个升序链表.swift"; sourceTree = "<group>"; };
		89886F6B272CF392003A626D /* 260.只出现一次的数字-iii.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "260.只出现一次的数字-iii.swift"; sourceTree = "<group>"; };
		89886F6F272EC8B2003A626D /* 500.键盘行.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "500.键盘行.swift"; sourceTree = "<group>"; };
		8988F1E92763997B00CDBAA9 /* 748.最短补全词.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "748.最短补全词.swift"; sourceTree = "<group>"; };
		8988F48C27B801DF0009A23E /* 1984.学生分数的最小差值.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1984.学生分数的最小差值.swift"; sourceTree = "<group>"; };
		8988F48E27B802470009A23E /* 1020.飞地的数量.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1020.飞地的数量.swift"; sourceTree = "<group>"; };
		898F44A42737DBDC0051A08C /* 598.范围求和-ii.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "598.范围求和-ii.swift"; sourceTree = "<group>"; };
		898F4E6B27815C3E00A89BD8 /* 390.消除游戏.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "390.消除游戏.swift"; sourceTree = "<group>"; };
		8992BF50275B2675007E107F /* 383.赎金信.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "383.赎金信.swift"; sourceTree = "<group>"; };
		89939A48282A9BFD00B9519C /* 1728.猫和老鼠-ii.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "1728.猫和老鼠-ii.cpp"; sourceTree = "<group>"; };
		89943B38275FAF80002F1171 /* 1034.边框着色.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1034.边框着色.swift"; sourceTree = "<group>"; };
		89943B412760F48C002F1171 /* 689.三个无重叠子数组的最大和.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "689.三个无重叠子数组的最大和.swift"; sourceTree = "<group>"; };
		89951E78282D527E00B98F5D /* 944.删列造序.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "944.删列造序.cpp"; sourceTree = "<group>"; };
		89951E7A282D52B300B98F5D /* 944.删列造序.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "944.删列造序.swift"; sourceTree = "<group>"; };
		89951E7C282EAC7400B98F5D /* A.面试题-01.05-一次编辑.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "A.面试题-01.05-一次编辑.swift"; sourceTree = "<group>"; };
		89951E7E282EAC7A00B98F5D /* A.面试题-01.05-一次编辑.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "A.面试题-01.05-一次编辑.cpp"; sourceTree = "<group>"; };
		89955F9E27C13B0F00E03BC0 /* 969.煎饼排序.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "969.煎饼排序.swift"; sourceTree = "<group>"; };
		89955FA227C2897F00E03BC0 /* 717.1-比特与-2-比特字符.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "717.1-比特与-2-比特字符.swift"; sourceTree = "<group>"; };
		89955FA827C3C75900E03BC0 /* 838.推多米诺.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "838.推多米诺.swift"; sourceTree = "<group>"; };
		8995D89C27303094001A499C /* 575.分糖果.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "575.分糖果.swift"; sourceTree = "<group>"; };
		8998BD1827ACE11A00ABE29A /* 1725.可以形成最大正方形的矩形数目.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1725.可以形成最大正方形的矩形数目.swift"; sourceTree = "<group>"; };
		899A76CF2747F6E2006DA530 /* 319.灯泡开关.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "319.灯泡开关.swift"; sourceTree = "<group>"; };
		899A76D12747F6F6006DA530 /* 391.完美矩形-1.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "391.完美矩形-1.swift"; sourceTree = "<group>"; };
		899A76D32747F703006DA530 /* 318.最大单词长度乘积-2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "318.最大单词长度乘积-2.swift"; sourceTree = "<group>"; };
		899A76D52747F710006DA530 /* 563.二叉树的坡度-2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "563.二叉树的坡度-2.swift"; sourceTree = "<group>"; };
		899A76D72747F72E006DA530 /* TreeNode.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = TreeNode.swift; sourceTree = "<group>"; };
		899A76D92747F753006DA530 /* 397.整数替换.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "397.整数替换.swift"; sourceTree = "<group>"; };
		899EF52727395E5700CCB02F /* 299.猜数字游戏.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "299.猜数字游戏.swift"; sourceTree = "<group>"; };
		89A12CE9282FFDCC000B7192 /* 691.贴纸拼词.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "691.贴纸拼词.swift"; sourceTree = "<group>"; };
		89A12CEB282FFDEF000B7192 /* 691.贴纸拼词.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "691.贴纸拼词.cpp"; sourceTree = "<group>"; };
		89A38F0D275E4942007FED61 /* 1816.截断句子.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1816.截断句子.swift"; sourceTree = "<group>"; };
		89A6BEFF26BD8182007BDF6B /* Cpp */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = Cpp; sourceTree = BUILT_PRODUCTS_DIR; };
		89A779EA276DD35B00B7CDA9 /* 419.甲板上的战舰.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "419.甲板上的战舰.swift"; sourceTree = "<group>"; };
		89A8999E27D651D700A7A6D1 /* 504.七进制数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "504.七进制数.swift"; sourceTree = "<group>"; };
		89A899A427D7AC8300A7A6D1 /* 2055.蜡烛之间的盘子.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2055.蜡烛之间的盘子.swift"; sourceTree = "<group>"; };
		89A899A827D8FB6300A7A6D1 /* 798.得分最高的最小轮调.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "798.得分最高的最小轮调.swift"; sourceTree = "<group>"; };
		89A899AA27DA4A9C00A7A6D1 /* 589.n-叉树的前序遍历.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "589.n-叉树的前序遍历.swift"; sourceTree = "<group>"; };
		89A899AB27DA4A9C00A7A6D1 /* 590.n-叉树的后序遍历.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "590.n-叉树的后序遍历.swift"; sourceTree = "<group>"; };
		89A899B727DB93E200A7A6D1 /* 2049.统计最高分的节点数目.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2049.统计最高分的节点数目.swift"; sourceTree = "<group>"; };
		89A955B127D3B873003B556A /* 521.最长特殊序列-ⅰ.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "521.最长特殊序列-ⅰ.swift"; sourceTree = "<group>"; };
		89A955B727D504AD003B556A /* 2100.适合打劫银行的日子.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2100.适合打劫银行的日子.swift"; sourceTree = "<group>"; };
		89AE440227ABA2A30023C3DC /* 1414.和为-k-的最少斐波那契数字数目.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1414.和为-k-的最少斐波那契数字数目.swift"; sourceTree = "<group>"; };
		89AE789B2751CDF000598666 /* 519.随机翻转矩阵.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "519.随机翻转矩阵.swift"; sourceTree = "<group>"; };
		89AE78A32751E7D600598666 /* 700.二叉搜索树中的搜索.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "700.二叉搜索树中的搜索.swift"; sourceTree = "<group>"; };
		89AE78A42751E7D600598666 /* 859.亲密字符串.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "859.亲密字符串.swift"; sourceTree = "<group>"; };
		89AE78A52751E7D600598666 /* 384.打乱数组.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "384.打乱数组.swift"; sourceTree = "<group>"; };
		89AE78A62751E7D600598666 /* 423.从英文中重建数字.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "423.从英文中重建数字.swift"; sourceTree = "<group>"; };
		89AE78A72751E7D600598666 /* 458.可怜的小猪.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "458.可怜的小猪.swift"; sourceTree = "<group>"; };
		89AF724727B8FCED00BD2211 /* 1189.气球-的最大数量.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1189.气球-的最大数量.swift"; sourceTree = "<group>"; };
		89AF724927BA9C6100BD2211 /* 540.有序数组中的单一元素.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "540.有序数组中的单一元素.swift"; sourceTree = "<group>"; };
		89AF724F27BBE97F00BD2211 /* 1380.矩阵中的幸运数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1380.矩阵中的幸运数.swift"; sourceTree = "<group>"; };
		89AF725627BE986000BD2211 /* 688.马-在棋盘上的概率.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "688.马-在棋盘上的概率.swift"; sourceTree = "<group>"; };
		89AF725C27BFEC9200BD2211 /* 1791.找出星型图的中心节点.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1791.找出星型图的中心节点.swift"; sourceTree = "<group>"; };
		89B070C827CA7E0B00DD7E68 /* 2016.增量元素之间的最大差值.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2016.增量元素之间的最大差值.swift"; sourceTree = "<group>"; };
		89B070CC27CB8DCF00DD7E68 /* 553.最优除法.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "553.最优除法.swift"; sourceTree = "<group>"; };
		89B070D227CD1F2B00DD7E68 /* 1601.最多可达成的换楼请求数目.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1601.最多可达成的换楼请求数目.swift"; sourceTree = "<group>"; };
		89B070D427CE60E000DD7E68 /* 6.z-字形变换.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "6.z-字形变换.swift"; sourceTree = "<group>"; };
		89B070D927CFBC8000DD7E68 /* 564.寻找最近的回文数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "564.寻找最近的回文数.swift"; sourceTree = "<group>"; };
		89B070DB27D2612B00DD7E68 /* 258.各位相加.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "258.各位相加.swift"; sourceTree = "<group>"; };
		89B070E127D2626800DD7E68 /* 2104.子数组范围和.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2104.子数组范围和.swift"; sourceTree = "<group>"; };
		89B0B689276A2D0000A10203 /* 851.喧闹和富有.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "851.喧闹和富有.swift"; sourceTree = "<group>"; };
		89B486202787431800A6930A /* 71.简化路径.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "71.简化路径.swift"; sourceTree = "<group>"; };
		89B48624278883B500A6930A /* 1614.括号的最大嵌套深度.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1614.括号的最大嵌套深度.swift"; sourceTree = "<group>"; };
		89B4862A2789DF0200A6930A /* 89.格雷编码.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "89.格雷编码.swift"; sourceTree = "<group>"; };
		89B4862C278A9E8B00A6930A /* 1629.按键持续时间最长的键.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1629.按键持续时间最长的键.swift"; sourceTree = "<group>"; };
		89B48632278C8D3900A6930A /* 306.累加数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "306.累加数.swift"; sourceTree = "<group>"; };
		89B48639278F2BE600A6930A /* 1036.逃离大迷宫.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1036.逃离大迷宫.swift"; sourceTree = "<group>"; };
		89B4863A278F2BE600A6930A /* 334.递增的三元子序列.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "334.递增的三元子序列.swift"; sourceTree = "<group>"; };
		89B4863E27907D5200A6930A /* 747.至少是其他数字两倍的最大数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "747.至少是其他数字两倍的最大数.swift"; sourceTree = "<group>"; };
		89B69A182765FEEC004A2892 /* 709.转换成小写字母.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "709.转换成小写字母.swift"; sourceTree = "<group>"; };
		89B6C494278056DE000F2DA5 /* 2022.将一维数组转变成二维数组.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2022.将一维数组转变成二维数组.swift"; sourceTree = "<group>"; };
		89B7F06D281ECF5500F3498F /* 1305.两棵二叉搜索树中的所有元素.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1305.两棵二叉搜索树中的所有元素.swift"; sourceTree = "<group>"; };
		89BC761B27A99A4500C140F9 /* 2000.反转单词前缀.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2000.反转单词前缀.swift"; sourceTree = "<group>"; };
		89C3FC4C26D1ED8600C87257 /* sorts.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = sorts.swift; sourceTree = "<group>"; };
		89C84273274A081700A73FAB /* 559.n-叉树的最大深度.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "559.n-叉树的最大深度.swift"; sourceTree = "<group>"; };
		89C84275274A09F400A73FAB /* Node.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Node.swift; sourceTree = "<group>"; };
		89D44118277823E0006B0055 /* 1078.bigram-分词.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1078.bigram-分词.swift"; sourceTree = "<group>"; };
		89D65EC927678B8600B855E3 /* 807.保持城市天际线.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "807.保持城市天际线.swift"; sourceTree = "<group>"; };
		89D65EDE2768D73B00B855E3 /* 630.课程表-iii.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "630.课程表-iii.swift"; sourceTree = "<group>"; };
		89D65EE02768D97200B855E3 /* PriorityQueue.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = PriorityQueue.swift; sourceTree = "<group>"; };
		89D82E7527F9EC7400EA9A92 /* 744.寻找比目标字母大的最小字母.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "744.寻找比目标字母大的最小字母.swift"; sourceTree = "<group>"; };
		89D82E7727FAEA6D00EA9A92 /* 307.区域和检索-数组可修改.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "307.区域和检索-数组可修改.swift"; sourceTree = "<group>"; };
		89E1BCD9281D8570009176A4 /* 908.最小差值-i.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "908.最小差值-i.swift"; sourceTree = "<group>"; };
		89E1BE3D281D893A009176A4 /* 819.最常见的单词.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "819.最常见的单词.swift"; sourceTree = "<group>"; };
		89E1BE3E281D893A009176A4 /* 357.计算各个位数不同的数字个数.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "357.计算各个位数不同的数字个数.swift"; sourceTree = "<group>"; };
		89E1BE3F281D893A009176A4 /* 804.唯一摩尔斯密码词.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "804.唯一摩尔斯密码词.swift"; sourceTree = "<group>"; };
		89E1BE40281D893B009176A4 /* 385.迷你语法分析器.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "385.迷你语法分析器.swift"; sourceTree = "<group>"; };
		89E1BE41281D893C009176A4 /* 905.按奇偶排序数组.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "905.按奇偶排序数组.swift"; sourceTree = "<group>"; };
		89E1BE42281D893C009176A4 /* 868.二进制间距.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "868.二进制间距.swift"; sourceTree = "<group>"; };
		89E1BE43281D893C009176A4 /* 479.最大回文数乘积.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "479.最大回文数乘积.swift"; sourceTree = "<group>"; };
		89E1BE44281D893C009176A4 /* 824.山羊拉丁文.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "824.山羊拉丁文.swift"; sourceTree = "<group>"; };
		89E1BE45281D893D009176A4 /* 821.字符的最短距离.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "821.字符的最短距离.swift"; sourceTree = "<group>"; };
		89E1BE46281D893D009176A4 /* 417.太平洋大西洋水流问题.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "417.太平洋大西洋水流问题.swift"; sourceTree = "<group>"; };
		89E1BE47281D893D009176A4 /* 806.写字符串需要的行数.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "806.写字符串需要的行数.swift"; sourceTree = "<group>"; };
		89E1BE48281D893D009176A4 /* 883.三维形体投影面积.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "883.三维形体投影面积.swift"; sourceTree = "<group>"; };
		89E1BE49281D893E009176A4 /* 1672.最富有客户的资产总量.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "1672.最富有客户的资产总量.swift"; sourceTree = "<group>"; };
		89E1BE4A281D893E009176A4 /* 796.旋转字符串.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "796.旋转字符串.swift"; sourceTree = "<group>"; };
		89E1BE4B281D893E009176A4 /* 386.字典序排数.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "386.字典序排数.swift"; sourceTree = "<group>"; };
		89E1BE4C281D893E009176A4 /* 398.随机数索引.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "398.随机数索引.swift"; sourceTree = "<group>"; };
		89E1BE4D281D893F009176A4 /* 429.n-叉树的层序遍历.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "429.n-叉树的层序遍历.swift"; sourceTree = "<group>"; };
		89E1BE4E281D893F009176A4 /* 780.到达终点.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "780.到达终点.swift"; sourceTree = "<group>"; };
		89E1BE4F281D893F009176A4 /* 310.最小高度树.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "310.最小高度树.swift"; sourceTree = "<group>"; };
		89E1BE50281D8940009176A4 /* 388.文件的最长绝对路径.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "388.文件的最长绝对路径.swift"; sourceTree = "<group>"; };
		89E1BE51281D8940009176A4 /* 396.旋转函数.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "396.旋转函数.swift"; sourceTree = "<group>"; };
		89E391E4276CD8DE0049A907 /* 1518.换酒问题.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1518.换酒问题.swift"; sourceTree = "<group>"; };
		89E5AAC927493A7E007DB9B9 /* 594.最长和谐子序列.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "594.最长和谐子序列.swift"; sourceTree = "<group>"; };
		89E5D876281FCC1600216365 /* 591.标签验证器.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "591.标签验证器.cpp"; sourceTree = "<group>"; };
		89E5D878281FCF1200216365 /* 591.标签验证器.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "591.标签验证器.swift"; sourceTree = "<group>"; };
		89E8F9A02793ED8100310336 /* 382.链表随机节点.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "382.链表随机节点.swift"; sourceTree = "<group>"; };
		89E8F9A22795BEA600310336 /* 1220.统计元音字母序列的数目.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1220.统计元音字母序列的数目.swift"; sourceTree = "<group>"; };
		89E8F9A82796FFF100310336 /* 539.最小时间差.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "539.最小时间差.swift"; sourceTree = "<group>"; };
		89E8F9AA279852E000310336 /* 219.存在重复元素-ii.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "219.存在重复元素-ii.swift"; sourceTree = "<group>"; };
		89E8F9B02799A58B00310336 /* 2029.石子游戏-ix.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "2029.石子游戏-ix.swift"; sourceTree = "<group>"; };
		89E8F9B2279AFE9B00310336 /* 1345.跳跃游戏-iv.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1345.跳跃游戏-iv.swift"; sourceTree = "<group>"; };
		89EDAC5F27A0459200BA4246 /* 1688.比赛中的配对次数.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1688.比赛中的配对次数.swift"; sourceTree = "<group>"; };
		89F7B9972785DAC1000326DC /* 1576.替换所有的问号.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "1576.替换所有的问号.swift"; sourceTree = "<group>"; };
		89F7BA2A2753D1570075865E /* 438.找到字符串中所有字母异位词.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "438.找到字符串中所有字母异位词.swift"; sourceTree = "<group>"; };
		89FA69B8273EC786005D1B5D /* 375.猜数字大小-ii.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = "375.猜数字大小-ii.swift"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		89554F9726BEDE7100FEDFF1 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		89A6BEFC26BD8182007BDF6B /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		89554FA126BEDED300FEDFF1 /* Swift */ = {
			isa = PBXGroup;
			children = (
				89B070D427CE60E000DD7E68 /* 6.z-字形变换.swift */,
				89886F54272CDE00003A626D /* 20.有效的括号.swift */,
				89886F64272CE221003A626D /* 21.合并两个有序链表.swift */,
				89886F67272CE4B9003A626D /* 23.合并k个升序链表.swift */,
				89886F49272C5E42003A626D /* 36.有效的数独.swift */,
				89B486202787431800A6930A /* 71.简化路径.swift */,
				89886F4F272CDC20003A626D /* 88.合并两个有序数组.swift */,
				89B4862A2789DF0200A6930A /* 89.格雷编码.swift */,
				89886F56272CDF2D003A626D /* 150.逆波兰表达式求值.swift */,
				895A04DA27EE088100AB66B9 /* 172.阶乘后的零.swift */,
				897A7ED127FC84710006B830 /* 191.位-1-的个数.swift */,
				893E1231272C51AD00EAC6FD /* 198.打家劫舍.swift */,
				893E1234272C554D00EAC6FD /* 215.数组中的第k个最大元素.swift */,
				89E8F9AA279852E000310336 /* 219.存在重复元素-ii.swift */,
				89886F58272CDFA2003A626D /* 224.基本计算器.swift */,
				89886F5B272CE03E003A626D /* 225.用队列实现栈.swift */,
				89886F5D272CE104003A626D /* 232.用栈实现队列.swift */,
				891095852731767C00981C0D /* 237.删除链表中的节点.swift */,
				89B070DB27D2612B00DD7E68 /* 258.各位相加.swift */,
				89886F6B272CF392003A626D /* 260.只出现一次的数字-iii.swift */,
				890126E92736395600440D63 /* 268.丢失的数字.swift */,
				899EF52727395E5700CCB02F /* 299.猜数字游戏.swift */,
				89B48632278C8D3900A6930A /* 306.累加数.swift */,
				89D82E7727FAEA6D00EA9A92 /* 307.区域和检索-数组可修改.swift */,
				89E1BE4F281D893F009176A4 /* 310.最小高度树.swift */,
				899A76D32747F703006DA530 /* 318.最大单词长度乘积-2.swift */,
				899A76CF2747F6E2006DA530 /* 319.灯泡开关.swift */,
				89554FA226BEDED300FEDFF1 /* 322.零钱兑换.swift */,
				89B4863A278F2BE600A6930A /* 334.递增的三元子序列.swift */,
				89886F45272C5A7E003A626D /* 347.前-k-个高频元素.swift */,
				89886F4C272C5EF5003A626D /* 349.两个数组的交集.swift */,
				89E1BE3E281D893A009176A4 /* 357.计算各个位数不同的数字个数.swift */,
				8910958B27342C7B00981C0D /* 367.有效的完全平方数.swift */,
				892EC6A2275C994D00CD0593 /* 372.超级次方.swift */,
				896BABCA2791C9CD0099C360 /* 373.查找和最小的k对数字.swift */,
				89FA69B8273EC786005D1B5D /* 375.猜数字大小-ii.swift */,
				89E8F9A02793ED8100310336 /* 382.链表随机节点.swift */,
				8992BF50275B2675007E107F /* 383.赎金信.swift */,
				89AE78A52751E7D600598666 /* 384.打乱数组.swift */,
				89E1BE40281D893B009176A4 /* 385.迷你语法分析器.swift */,
				89E1BE4B281D893E009176A4 /* 386.字典序排数.swift */,
				89E1BE50281D8940009176A4 /* 388.文件的最长绝对路径.swift */,
				898F4E6B27815C3E00A89BD8 /* 390.消除游戏.swift */,
				899A76D12747F6F6006DA530 /* 391.完美矩形-1.swift */,
				8952093827E0DDE200BA01F2 /* 393.utf-8-编码验证.swift */,
				89E1BE51281D8940009176A4 /* 396.旋转函数.swift */,
				899A76D92747F753006DA530 /* 397.整数替换.swift */,
				89E1BE4C281D893E009176A4 /* 398.随机数索引.swift */,
				89723784275A656900EBC5C5 /* 400.第-n-位数字.swift */,
				89E1BE46281D893D009176A4 /* 417.太平洋大西洋水流问题.swift */,
				89A779EA276DD35B00B7CDA9 /* 419.甲板上的战舰.swift */,
				891A3A8927F89D3F0003D731 /* 420.强密码检验器.swift */,
				89AE78A62751E7D600598666 /* 423.从英文中重建数字.swift */,
				89E1BE4D281D893F009176A4 /* 429.n-叉树的层序遍历.swift */,
				8952093F27E1C85200BA01F2 /* 432.全-o-1-的数据结构.swift */,
				894F52542826C86800EA6C32 /* 433.最小基因变化.swift */,
				89F7BA2A2753D1570075865E /* 438.找到字符串中所有字母异位词.swift */,
				895A04D227EB65ED00AB66B9 /* 440.字典序的第k小数字.swift */,
				894F52582827C1C300EA6C32 /* 442.数组中重复的数据.swift */,
				89185D1F282C0D0100346F93 /* 449.序列化和反序列化二叉搜索树.swift */,
				89886F47272C5DA1003A626D /* 451.根据字符出现频率排序.swift */,
				89AE78A72751E7D600598666 /* 458.可怜的小猪.swift */,
				8939CD84277F59A0009F0CEE /* 472.连接词.swift */,
				897355192776209C0034C87A /* 475.供暖器.swift */,
				89E1BE43281D893C009176A4 /* 479.最大回文数乘积.swift */,
				8976631B273C1B2600507E1F /* 495.提莫攻击.swift */,
				89886F6F272EC8B2003A626D /* 500.键盘行.swift */,
				89A8999E27D651D700A7A6D1 /* 504.七进制数.swift */,
				89723783275A656800EBC5C5 /* 506.相对名次.swift */,
				8939CD7C277F587E009F0CEE /* 507.完美数.swift */,
				89886F51272CDCE6003A626D /* 509.斐波那契数.swift */,
				89AE789B2751CDF000598666 /* 519.随机翻转矩阵.swift */,
				891C5A62273F718D0047E46E /* 520.检测大写字母.swift */,
				89A955B127D3B873003B556A /* 521.最长特殊序列-ⅰ.swift */,
				891916A727C92694002B8702 /* 537.复数乘法.swift */,
				89E8F9A82796FFF100310336 /* 539.最小时间差.swift */,
				89AF724927BA9C6100BD2211 /* 540.有序数组中的单一元素.swift */,
				89B070CC27CB8DCF00DD7E68 /* 553.最优除法.swift */,
				89C84273274A081700A73FAB /* 559.n-叉树的最大深度.swift */,
				899A76D52747F710006DA530 /* 563.二叉树的坡度-2.swift */,
				89B070D927CFBC8000DD7E68 /* 564.寻找最近的回文数.swift */,
				8995D89C27303094001A499C /* 575.分糖果.swift */,
				89A899AA27DA4A9C00A7A6D1 /* 589.n-叉树的前序遍历.swift */,
				89A899AB27DA4A9C00A7A6D1 /* 590.n-叉树的后序遍历.swift */,
				89E5D878281FCF1200216365 /* 591.标签验证器.swift */,
				89E5AAC927493A7E007DB9B9 /* 594.最长和谐子序列.swift */,
				898F44A42737DBDC0051A08C /* 598.范围求和-ii.swift */,
				8952093927E0DDE200BA01F2 /* 599.两个列表的最小索引总和.swift */,
				895A04C127E76EF500AB66B9 /* 606.根据二叉树创建字符串.swift */,
				89766320273D6A5600507E1F /* 629.k个逆序对数组.swift */,
				89D65EDE2768D73B00B855E3 /* 630.课程表-iii.swift */,
				895A04CC27E8B97F00AB66B9 /* 653.两数之和-iv-输入-bst.swift */,
				895A04D827ECC87100AB66B9 /* 661.图片平滑器.swift */,
				890E883F2740CB8C0073633B /* 677.键值映射.swift */,
				890C2DDB27EF694600F5191D /* 682.棒球比赛.swift */,
				8973551B2776209C0034C87A /* 686.重复叠加字符串匹配.swift */,
				89AF725627BE986000BD2211 /* 688.马-在棋盘上的概率.swift */,
				89943B412760F48C002F1171 /* 689.三个无重叠子数组的最大和.swift */,
				89A12CE9282FFDCC000B7192 /* 691.贴纸拼词.swift */,
				892023CE27F1E30100F3C7E2 /* 693.交替位二进制数.swift */,
				89AE78A32751E7D600598666 /* 700.二叉搜索树中的搜索.swift */,
				89B69A182765FEEC004A2892 /* 709.转换成小写字母.swift */,
				894F524C282415FA00EA6C32 /* 713.乘积小于k的子数组.swift */,
				89955FA227C2897F00E03BC0 /* 717.1-比特与-2-比特字符.swift */,
				8952094127E2C3F400BA01F2 /* 720.词典中最长的单词.swift */,
				891A3A8127F5F0EC0003D731 /* 728.自除数.swift */,
				89D82E7527F9EC7400EA9A92 /* 744.寻找比目标字母大的最小字母.swift */,
				89B4863E27907D5200A6930A /* 747.至少是其他数字两倍的最大数.swift */,
				8988F1E92763997B00CDBAA9 /* 748.最短补全词.swift */,
				897A7ECD27FC7F480006B830 /* 762.二进制表示中质数个计算置位.swift */,
				89E1BE4E281D893F009176A4 /* 780.到达终点.swift */,
				89723785275A656900EBC5C5 /* 786.第-k-个最小的素数分数.swift */,
				892396DF27624BBD0041A3B9 /* 794.有效的井字游戏.swift */,
				89E1BE4A281D893E009176A4 /* 796.旋转字符串.swift */,
				89A899A827D8FB6300A7A6D1 /* 798.得分最高的最小轮调.swift */,
				89E1BE3F281D893A009176A4 /* 804.唯一摩尔斯密码词.swift */,
				89E1BE47281D893D009176A4 /* 806.写字符串需要的行数.swift */,
				89D65EC927678B8600B855E3 /* 807.保持城市天际线.swift */,
				8923BB992830C5990034AA0D /* 812.最大三角形面积.swift */,
				89E1BE3D281D893A009176A4 /* 819.最常见的单词.swift */,
				89E1BE45281D893D009176A4 /* 821.字符的最短距离.swift */,
				89E1BE44281D893C009176A4 /* 824.山羊拉丁文.swift */,
				8939CD86277F59A0009F0CEE /* 825.适龄的朋友.swift */,
				89955FA827C3C75900E03BC0 /* 838.推多米诺.swift */,
				8939CD83277F59A0009F0CEE /* 846.一手顺子.swift */,
				89B0B689276A2D0000A10203 /* 851.喧闹和富有.swift */,
				89886F5F272CE174003A626D /* 856.括号的分数.swift */,
				89AE78A42751E7D600598666 /* 859.亲密字符串.swift */,
				89E1BE42281D893C009176A4 /* 868.二进制间距.swift */,
				89E1BE48281D893D009176A4 /* 883.三维形体投影面积.swift */,
				8984640727A69483006D99B5 /* 884.两句话中的不常见单词.swift */,
				89E1BE41281D893C009176A4 /* 905.按奇偶排序数组.swift */,
				89E1BCD9281D8570009176A4 /* 908.最小差值-i.swift */,
				895F9E412764311D00E2DF08 /* 911.在线选举.swift */,
				8919169F27C673B5002B8702 /* 917.仅仅反转字母.swift */,
				894F52522825755400EA6C32 /* 933.最近的请求次数.swift */,
				894579FD2820EC1700168863 /* 937.重新排列日志文件.swift */,
				894F525E28294F0700EA6C32 /* 942.增减字符串匹配.swift */,
				89951E7A282D52B300B98F5D /* 944.删列造序.swift */,
				891A3A8727F74DEE0003D731 /* 954.二倍数对数组.swift */,
				89955F9E27C13B0F00E03BC0 /* 969.煎饼排序.swift */,
				89075150276EFD7B009BA671 /* 997.找到小镇的法官.swift */,
				8953DFB927B2B55C00FB2C00 /* 1001.网格照明.swift */,
				89723786275A656900EBC5C5 /* 1005.k-次取反后最大化的数组和.swift */,
				8988F48E27B802470009A23E /* 1020.飞地的数量.swift */,
				89943B38275FAF80002F1171 /* 1034.边框着色.swift */,
				89B48639278F2BE600A6930A /* 1036.逃离大迷宫.swift */,
				89D44118277823E0006B0055 /* 1078.bigram-分词.swift */,
				897355182776209C0034C87A /* 1154.一年中的第几天.swift */,
				8955A7F42783456F00AB2F8D /* 1185.一周中的第几天.swift */,
				89AF724727B8FCED00BD2211 /* 1189.气球-的最大数量.swift */,
				8910958D2735799500981C0D /* 1218.最长定差子序列.swift */,
				89E8F9A22795BEA600310336 /* 1220.统计元音字母序列的数目.swift */,
				8939CD85277F59A0009F0CEE /* 1296.划分数组为连续数字的集合.swift */,
				89B7F06D281ECF5500F3498F /* 1305.两棵二叉搜索树中的所有元素.swift */,
				8972B690279C14A600D14CE7 /* 1332.删除回文子序列.swift */,
				8900694827A81AD500EBE650 /* 1342.将数字变成-0-的操作次数.swift */,
				89E8F9B2279AFE9B00310336 /* 1345.跳跃游戏-iv.swift */,
				89AF724F27BBE97F00BD2211 /* 1380.矩阵中的幸运数.swift */,
				8953DFB727B15D7F00FB2C00 /* 1405.最长快乐字符串.swift */,
				89AE440227ABA2A30023C3DC /* 1414.和为-k-的最少斐波那契数字数目.swift */,
				89723787275A656900EBC5C5 /* 1446.连续字符.swift */,
				8953DFC127B5540200FB2C00 /* 1447.最简分数.swift */,
				89E391E4276CD8DE0049A907 /* 1518.换酒问题.swift */,
				89F7B9972785DAC1000326DC /* 1576.替换所有的问号.swift */,
				89B070D227CD1F2B00DD7E68 /* 1601.最多可达成的换楼请求数目.swift */,
				892023D627F4A25C00F3C7E2 /* 1606.找到处理最多请求的服务器.swift */,
				8973552327776F7E0034C87A /* 1609.奇偶树.swift */,
				89075154276F674C009BA671 /* 1610.可见点的最大数目.swift */,
				89B48624278883B500A6930A /* 1614.括号的最大嵌套深度.swift */,
				89B4862C278A9E8B00A6930A /* 1629.按键持续时间最长的键.swift */,
				89E1BE49281D893E009176A4 /* 1672.最富有客户的资产总量.swift */,
				89EDAC5F27A0459200BA4246 /* 1688.比赛中的配对次数.swift */,
				8973551A2776209C0034C87A /* 1705.吃苹果的最大数目.swift */,
				891916A127C7C705002B8702 /* 1706.球会落何处.swift */,
				896BABCC2792F1420099C360 /* 1716.计算力扣银行的钱.swift */,
				8998BD1827ACE11A00ABE29A /* 1725.可以形成最大正方形的矩形数目.swift */,
				8953DFB127AF844900FB2C00 /* 1748.唯一元素的和.swift */,
				8900694C27A9813100EBE650 /* 1763.最长的美好子字符串.swift */,
				891DCDDF27A57C9A0068417B /* 1765.地图中的最高点.swift */,
				89AF725C27BFEC9200BD2211 /* 1791.找出星型图的中心节点.swift */,
				89A38F0D275E4942007FED61 /* 1816.截断句子.swift */,
				8928424E282235AF00484B59 /* 1823.找出游戏的获胜者.swift */,
				8988F48C27B801DF0009A23E /* 1984.学生分数的最小差值.swift */,
				8939CD87277F59A0009F0CEE /* 1995.统计特殊四元组.swift */,
				89518A0F27A392D7009CA2D8 /* 1996.游戏中弱角色的数量.swift */,
				89BC761B27A99A4500C140F9 /* 2000.反转单词前缀.swift */,
				8953DFBF27B3FB3F00FB2C00 /* 2006.差的绝对值为-k-的数对数目.swift */,
				892EA22227A1996100E1E00D /* 2013.检测正方形.swift */,
				89B070C827CA7E0B00DD7E68 /* 2016.增量元素之间的最大差值.swift */,
				89B6C494278056DE000F2DA5 /* 2022.将一维数组转变成二维数组.swift */,
				892023D027F35DA400F3C7E2 /* 2024.考试的最大困扰度.swift */,
				890C2DDD27F0126B00F5191D /* 2028.找出缺失的观测数据.swift */,
				89E8F9B02799A58B00310336 /* 2029.石子游戏-ix.swift */,
				8972B692279D1CAF00D14CE7 /* 2034.股票价格波动.swift */,
				895A04D027EA16DC00AB66B9 /* 2038.如果相邻两个颜色均相同则删除当前颜色.swift */,
				895A04C727E775D800AB66B9 /* 2039.网络空闲的时刻.swift */,
				895A04BF27E4B3D200AB66B9 /* 2043.简易银行系统.swift */,
				8952093727E0DDE200BA01F2 /* 2044.统计按位或能得到最大值的子集数目.swift */,
				8916EA1A279EE5B8000B26A9 /* 2045.到达目的地的第二短时间.swift */,
				892EA22427A2E7EB00E1E00D /* 2047.句子中的有效单词数.swift */,
				89A899B727DB93E200A7A6D1 /* 2049.统计最高分的节点数目.swift */,
				89A899A427D7AC8300A7A6D1 /* 2055.蜡烛之间的盘子.swift */,
				89A955B727D504AD003B556A /* 2100.适合打劫银行的日子.swift */,
				89B070E127D2626800DD7E68 /* 2104.子数组范围和.swift */,
				89886F61272CE1FF003A626D /* 链表 */,
				89C3FC4B26D1ED6600C87257 /* 排序 */,
				89951E7C282EAC7400B98F5D /* A.面试题-01.05-一次编辑.swift */,
				89554FA326BEDED300FEDFF1 /* main.swift */,
				89C84275274A09F400A73FAB /* Node.swift */,
				89D65EE02768D97200B855E3 /* PriorityQueue.swift */,
				899A76D72747F72E006DA530 /* TreeNode.swift */,
			);
			path = Swift;
			sourceTree = "<group>";
		};
		89886F61272CE1FF003A626D /* 链表 */ = {
			isa = PBXGroup;
			children = (
				89886F62272CE20B003A626D /* ListNode.swift */,
			);
			name = "链表";
			sourceTree = "<group>";
		};
		89A6BF0026BD8182007BDF6B /* Cpp */ = {
			isa = PBXGroup;
			children = (
				8975E62D281ED180006F4F6A /* 1.两数之和.cpp */,
				8975E640281ED184006F4F6A /* 2.两数相加.cpp */,
				8975E5B3281ED16A006F4F6A /* 3.无重复字符的最长子串.cpp */,
				8975E675281ED18A006F4F6A /* 4.寻找两个正序数组的中位数.cpp */,
				8975E6B4281ED192006F4F6A /* 5.最长回文子串.cpp */,
				8975E66D281ED189006F4F6A /* 6.z-字形变换.cpp */,
				8975E68A281ED18D006F4F6A /* 7.整数反转.cpp */,
				8975E6A1281ED190006F4F6A /* 8.字符串转换整数-atoi.cpp */,
				8975E569281ED15F006F4F6A /* 9.回文数.cpp */,
				8975E5EA281ED174006F4F6A /* 11.盛最多水的容器.cpp */,
				8975E63E281ED183006F4F6A /* 15.三数之和.cpp */,
				8975E690281ED18E006F4F6A /* 19.删除链表的倒数第-n-个结点.cpp */,
				8975E666281ED188006F4F6A /* 20.有效的括号.cpp */,
				8975E684281ED18C006F4F6A /* 21.合并两个有序链表.cpp */,
				8975E67B281ED18B006F4F6A /* 23.合并k个升序链表.cpp */,
				8975E64C281ED185006F4F6A /* 25.k-个一组翻转链表.cpp */,
				8975E699281ED18F006F4F6A /* 26.删除有序数组中的重复项.cpp */,
				8975E563281ED15E006F4F6A /* 27.移除元素.cpp */,
				8975E63B281ED183006F4F6A /* 29.两数相除.cpp */,
				8975E60E281ED17B006F4F6A /* 34.在排序数组中查找元素的第一个和最后一个位置.cpp */,
				8975E60F281ED17B006F4F6A /* 36.有效的数独.cpp */,
				8975E5F0281ED175006F4F6A /* 38.外观数列.cpp */,
				8975E573281ED161006F4F6A /* 58.最后一个单词的长度.cpp */,
				8975E57E281ED162006F4F6A /* 66.加一-1.cpp */,
				8975E6B9281ED193006F4F6A /* 68.文本左右对齐.cpp */,
				8975E68F281ED18E006F4F6A /* 70.爬楼梯.cpp */,
				8975E5C2281ED16D006F4F6A /* 71.简化路径.cpp */,
				8975E605281ED179006F4F6A /* 76.最小覆盖子串.cpp */,
				8975E5E0281ED172006F4F6A /* 83.删除排序链表中的重复元素.cpp */,
				8975E6BD281ED194006F4F6A /* 88.合并两个有序数组.cpp */,
				8975E619281ED17D006F4F6A /* 89.格雷编码.cpp */,
				8975E60B281ED17A006F4F6A /* 92.反转链表-ii.cpp */,
				8975E6A0281ED190006F4F6A /* 94.二叉树的中序遍历.cpp */,
				8975E6A6281ED191006F4F6A /* 95.不同的二叉搜索树-ii.cpp */,
				8975E5BF281ED16C006F4F6A /* 96.不同的二叉搜索树.cpp */,
				8975E61D281ED17D006F4F6A /* 98.验证二叉搜索树.cpp */,
				8975E5BB281ED16B006F4F6A /* 99.恢复二叉搜索树.cpp */,
				8975E59C281ED166006F4F6A /* 101.对称二叉树.cpp */,
				8975E621281ED17E006F4F6A /* 102.二叉树的层序遍历.cpp */,
				8975E5E7281ED174006F4F6A /* 104.二叉树的最大深度.cpp */,
				8975E5AE281ED169006F4F6A /* 105.从前序与中序遍历序列构造二叉树.cpp */,
				8975E64F281ED186006F4F6A /* 106.从中序与后序遍历序列构造二叉树.cpp */,
				8975E6A7281ED191006F4F6A /* 108.将有序数组转换为二叉搜索树.cpp */,
				8975E67E281ED18C006F4F6A /* 110.平衡二叉树.cpp */,
				8975E635281ED182006F4F6A /* 114.二叉树展开为链表.cpp */,
				8975E582281ED163006F4F6A /* 116.填充每个节点的下一个右侧节点指针.cpp */,
				8975E5A9281ED168006F4F6A /* 121.买卖股票的最佳时机.cpp */,
				8975E5A0281ED167006F4F6A /* 122.买卖股票的最佳时机-ii.cpp */,
				8975E5F6281ED176006F4F6A /* 124.二叉树中的最大路径和.cpp */,
				8975E647281ED185006F4F6A /* 130.被围绕的区域.cpp */,
				8975E5CA281ED16E006F4F6A /* 141.环形链表.cpp */,
				8975E65A281ED187006F4F6A /* 142.环形链表-ii.cpp */,
				8975E627281ED17F006F4F6A /* 144.二叉树的前序遍历.cpp */,
				8975E620281ED17E006F4F6A /* 145.二叉树的后序遍历.cpp */,
				8975E58F281ED164006F4F6A /* 146.lru-缓存机制.cpp */,
				8975E560281ED15E006F4F6A /* 150.逆波兰表达式求值.cpp */,
				8975E585281ED163006F4F6A /* 162.寻找峰值.cpp */,
				8975E5C0281ED16C006F4F6A /* 166.分数到小数.cpp */,
				8975E665281ED188006F4F6A /* 167.两数之和-ii-输入有序数组.cpp */,
				8975E61A281ED17D006F4F6A /* 172.阶乘后的零.cpp */,
				8975E64D281ED185006F4F6A /* 173.二叉搜索树迭代器.cpp */,
				8975E682281ED18C006F4F6A /* 187.重复的dna序列.cpp */,
				8975E5C6281ED16D006F4F6A /* 188.买卖股票的最佳时机-iv.cpp */,
				8975E615281ED17C006F4F6A /* 191.位-1-的个数.cpp */,
				8975E62B281ED180006F4F6A /* 198.打家劫舍.cpp */,
				8975E5D0281ED16F006F4F6A /* 203.移除链表元素.cpp */,
				8975E565281ED15E006F4F6A /* 206.反转链表.cpp */,
				8975E5E6281ED173006F4F6A /* 211.添加与搜索单词-数据结构设计-1.cpp */,
				8975E5F2281ED176006F4F6A /* 212.单词搜索-ii.cpp */,
				8975E59B281ED166006F4F6A /* 215.数组中的第k个最大元素.cpp */,
				8975E590281ED164006F4F6A /* 219.存在重复元素-ii.cpp */,
				8975E606281ED179006F4F6A /* 222.完全二叉树的节点个数.cpp */,
				8975E5D7281ED171006F4F6A /* 223.矩形面积.cpp */,
				8975E69A281ED18F006F4F6A /* 224.基本计算器.cpp */,
				8975E600281ED178006F4F6A /* 225.用队列实现栈.cpp */,
				8975E5B0281ED16A006F4F6A /* 226.翻转二叉树.cpp */,
				8975E5F9281ED177006F4F6A /* 229.求众数-ii-1.cpp */,
				8975E642281ED184006F4F6A /* 230.二叉搜索树中第k小的元素.cpp */,
				8975E617281ED17C006F4F6A /* 232.用栈实现队列.cpp */,
				8975E656281ED186006F4F6A /* 234.回文链表.cpp */,
				8975E567281ED15F006F4F6A /* 235.二叉搜索树的最近公共祖先.cpp */,
				8975E6AA281ED191006F4F6A /* 236.二叉树的最近公共祖先.cpp */,
				8975E68E281ED18E006F4F6A /* 237.删除链表中的节点.cpp */,
				8975E613281ED17C006F4F6A /* 239.滑动窗口最大值.cpp */,
				8975E5FF281ED178006F4F6A /* 240.搜索二维矩阵-ii.cpp */,
				8975E603281ED179006F4F6A /* 258.各位相加.cpp */,
				8975E610281ED17B006F4F6A /* 260.只出现一次的数字-iii.cpp */,
				8975E579281ED162006F4F6A /* 268.丢失的数字.cpp */,
				8975E6B6281ED193006F4F6A /* 273.整数转换英文表示.cpp */,
				8975E67D281ED18B006F4F6A /* 282.给表达式添加运算符.cpp */,
				8975E643281ED184006F4F6A /* 283.移动零.cpp */,
				8975E670281ED18A006F4F6A /* 284.顶端迭代器.cpp */,
				8975E5B6281ED16B006F4F6A /* 292.nim-游戏.cpp */,
				8975E60D281ED17A006F4F6A /* 295.数据流的中位数.cpp */,
				8975E601281ED178006F4F6A /* 297.二叉树的序列化与反序列化.cpp */,
				8975E63F281ED183006F4F6A /* 299.猜数字游戏.cpp */,
				8975E5AB281ED169006F4F6A /* 301.删除无效的括号.cpp */,
				8975E5E1281ED172006F4F6A /* 306.累加数.cpp */,
				8975E698281ED18F006F4F6A /* 307.区域和检索-数组可修改.cpp */,
				8975E608281ED179006F4F6A /* 309.最佳买卖股票时机含冷冻期.cpp */,
				8975E5AF281ED169006F4F6A /* 316.去除重复字母.cpp */,
				8975E66E281ED189006F4F6A /* 318.最大单词长度乘积.cpp */,
				8975E64B281ED185006F4F6A /* 319.灯泡开关.cpp */,
				8975E630281ED181006F4F6A /* 322.零钱兑换.cpp */,
				8975E679281ED18B006F4F6A /* 326.3-的幂.cpp */,
				8975E5A8281ED168006F4F6A /* 334.递增的三元子序列.cpp */,
				8975E691281ED18E006F4F6A /* 335.路径交叉.cpp */,
				8975E592281ED164006F4F6A /* 341.扁平化嵌套列表迭代器.cpp */,
				8975E5FD281ED178006F4F6A /* 344.反转字符串.cpp */,
				8975E69F281ED190006F4F6A /* 347.前-k-个高频元素.cpp */,
				8975E632281ED181006F4F6A /* 349.两个数组的交集.cpp */,
				8975E685281ED18C006F4F6A /* 352.将数据流变为多个不相交区间.cpp */,
				8975E602281ED178006F4F6A /* 367.有效的完全平方数.cpp */,
				8975E677281ED18B006F4F6A /* 371.两整数之和.cpp */,
				8975E618281ED17C006F4F6A /* 372.超级次方.cpp */,
				8975E5C5281ED16D006F4F6A /* 373.查找和最小的k对数字.cpp */,
				8975E5BC281ED16C006F4F6A /* 375.猜数字大小-ii.cpp */,
				8975E5DA281ED171006F4F6A /* 380.o-1-时间插入、删除和获取随机元素.cpp */,
				8975E58C281ED164006F4F6A /* 382.链表随机节点.cpp */,
				8975E58E281ED164006F4F6A /* 383.赎金信.cpp */,
				8975E66C281ED189006F4F6A /* 384.打乱数组.cpp */,
				8975E689281ED18D006F4F6A /* 390.消除游戏.cpp */,
				8975E5D9281ED171006F4F6A /* 391.完美矩形.cpp */,
				8975E6A9281ED191006F4F6A /* 393.utf-8-编码验证.cpp */,
				8975E5FA281ED177006F4F6A /* 397.整数替换.cpp */,
				8975E5F5281ED176006F4F6A /* 400.第-n-位数字.cpp */,
				8975E654281ED186006F4F6A /* 407.接雨水-ii.cpp */,
				8975E67F281ED18C006F4F6A /* 410.分割数组的最大值.cpp */,
				8975E595281ED165006F4F6A /* 412.fizz-buzz.cpp */,
				8975E57D281ED162006F4F6A /* 414.第三大的数.cpp */,
				8975E5FB281ED177006F4F6A /* 416.分割等和子集.cpp */,
				8975E614281ED17C006F4F6A /* 419.甲板上的战舰.cpp */,
				8975E57C281ED162006F4F6A /* 420.强密码检验器.cpp */,
				8975E5AC281ED169006F4F6A /* 423.从英文中重建数字.cpp */,
				8975E5F1281ED176006F4F6A /* 430.扁平化多级双向链表.cpp */,
				8975E616281ED17C006F4F6A /* 432.全-o-1-的数据结构.cpp */,
				894F52562826C88100EA6C32 /* 433.最小基因变化.cpp */,
				8975E570281ED160006F4F6A /* 434.字符串中的单词数.cpp */,
				8975E5EC281ED174006F4F6A /* 437.路径总和-iii.cpp */,
				8975E651281ED186006F4F6A /* 438.找到字符串中所有字母异位词.cpp */,
				8975E628281ED17F006F4F6A /* 440.字典序的第k小数字.cpp */,
				8975E5B2281ED16A006F4F6A /* 441.排列硬币.cpp */,
				894F525A2827C23400EA6C32 /* 442.数组中重复的数据.cpp */,
				8975E6B5281ED193006F4F6A /* 447.回旋镖的数量.cpp */,
				89185D21282C0D1600346F93 /* 449.序列化和反序列化二叉搜索树.cpp */,
				8975E681281ED18C006F4F6A /* 450.删除二叉搜索树中的节点.cpp */,
				8975E604281ED179006F4F6A /* 451.根据字符出现频率排序.cpp */,
				8975E56F281ED160006F4F6A /* 453.最小操作次数使数组元素相等-1.cpp */,
				8975E598281ED165006F4F6A /* 458.可怜的小猪.cpp */,
				8975E572281ED161006F4F6A /* 470.用-rand-7-实现-rand-10.cpp */,
				8975E663281ED188006F4F6A /* 472.连接词.cpp */,
				8975E5D3281ED170006F4F6A /* 475.供暖器.cpp */,
				8975E648281ED185006F4F6A /* 476.数字的补数.cpp */,
				8975E5EE281ED175006F4F6A /* 482.密钥格式化.cpp */,
				8975E687281ED18D006F4F6A /* 488.祖玛游戏.cpp */,
				8975E65B281ED187006F4F6A /* 492.构造矩形.cpp */,
				8975E65C281ED187006F4F6A /* 495.提莫攻击.cpp */,
				8975E5F4281ED176006F4F6A /* 496.下一个更大元素-i.cpp */,
				8975E568281ED15F006F4F6A /* 500.键盘行.cpp */,
				8975E5A6281ED168006F4F6A /* 502.ipo.cpp */,
				8975E59F281ED166006F4F6A /* 503.下一个更大元素-ii.cpp */,
				8975E5B5281ED16B006F4F6A /* 504.七进制数.cpp */,
				8975E5A3281ED167006F4F6A /* 506.相对名次.cpp */,
				8975E5F8281ED177006F4F6A /* 507.完美数.cpp */,
				8975E69B281ED18F006F4F6A /* 509.斐波那契数.cpp */,
				8975E659281ED187006F4F6A /* 517.超级洗衣机.cpp */,
				8975E5B4281ED16A006F4F6A /* 519.随机翻转矩阵.cpp */,
				8975E59D281ED166006F4F6A /* 520.检测大写字母.cpp */,
				8975E623281ED17E006F4F6A /* 521.最长特殊序列-ⅰ.cpp */,
				8975E629281ED180006F4F6A /* 524.通过删除字母匹配到字典里最长单词.cpp */,
				8975E578281ED162006F4F6A /* 530.二叉搜索树的最小绝对差.cpp */,
				8975E652281ED186006F4F6A /* 537.复数乘法.cpp */,
				8975E6A4281ED191006F4F6A /* 538.把二叉搜索树转换为累加树.cpp */,
				8975E5F7281ED176006F4F6A /* 539.最小时间差.cpp */,
				8975E683281ED18C006F4F6A /* 540.有序数组中的单一元素.cpp */,
				8975E6AC281ED192006F4F6A /* 553.最优除法.cpp */,
				8975E657281ED187006F4F6A /* 559.n-叉树的最大深度.cpp */,
				8975E562281ED15E006F4F6A /* 563.二叉树的坡度.cpp */,
				8975E5FC281ED177006F4F6A /* 564.寻找最近的回文数.cpp */,
				8975E584281ED163006F4F6A /* 567.字符串的排列.cpp */,
				8975E69D281ED190006F4F6A /* 575.分糖果.cpp */,
				8975E667281ED189006F4F6A /* 589.n-叉树的前序遍历.cpp */,
				8975E59A281ED166006F4F6A /* 590.n-叉树的后序遍历.cpp */,
				89E5D876281FCC1600216365 /* 591.标签验证器.cpp */,
				8975E5C7281ED16E006F4F6A /* 594.最长和谐子序列.cpp */,
				8975E68B281ED18D006F4F6A /* 598.范围求和-ii.cpp */,
				8975E631281ED181006F4F6A /* 599.两个列表的最小索引总和.cpp */,
				8975E5A1281ED167006F4F6A /* 600.不含连续-1-的非负整数.cpp */,
				8975E5F3281ED176006F4F6A /* 606.根据二叉树创建字符串.cpp */,
				8975E57A281ED162006F4F6A /* 629.k个逆序对数组.cpp */,
				8975E5CF281ED16F006F4F6A /* 630.课程表-iii.cpp */,
				8975E5DF281ED172006F4F6A /* 638.大礼包.cpp */,
				8975E5BD281ED16C006F4F6A /* 639.解码方法-ii.cpp */,
				8975E62E281ED180006F4F6A /* 650.只有两个键的键盘.cpp */,
				8975E62F281ED181006F4F6A /* 652.寻找重复的子树.cpp */,
				8975E622281ED17E006F4F6A /* 653.两数之和-iv-输入-bst.cpp */,
				8975E5C8281ED16E006F4F6A /* 654.最大二叉树.cpp */,
				8975E5E4281ED173006F4F6A /* 661.图片平滑器.cpp */,
				8975E5D8281ED171006F4F6A /* 673.最长递增子序列的个数.cpp */,
				8975E65F281ED188006F4F6A /* 677.键值映射.cpp */,
				8975E56B281ED15F006F4F6A /* 678.有效的括号字符串.cpp */,
				8975E653281ED186006F4F6A /* 682.棒球比赛.cpp */,
				8975E5C4281ED16D006F4F6A /* 686.重复叠加字符串匹配.cpp */,
				8975E693281ED18E006F4F6A /* 688.马-在棋盘上的概率.cpp */,
				8975E63C281ED183006F4F6A /* 689.三个无重叠子数组的最大和.cpp */,
				89A12CEB282FFDEF000B7192 /* 691.贴纸拼词.cpp */,
				8975E5A2281ED167006F4F6A /* 693.交替位二进制数.cpp */,
				8975E5E8281ED174006F4F6A /* 700.二叉搜索树中的搜索.cpp */,
				8975E5D2281ED170006F4F6A /* 701.二叉搜索树中的插入操作.cpp */,
				8975E607281ED179006F4F6A /* 704.二分查找.cpp */,
				8975E672281ED18A006F4F6A /* 709.转换成小写字母.cpp */,
				8975E5D4281ED170006F4F6A /* 710.黑名单中的随机数.cpp */,
				894F524E2824161B00EA6C32 /* 713.乘积小于k的子数组.cpp */,
				8975E646281ED184006F4F6A /* 714.买卖股票的最佳时机含手续费.cpp */,
				8975E66F281ED18A006F4F6A /* 717.1-比特与-2-比特字符.cpp */,
				8975E609281ED17A006F4F6A /* 720.词典中最长的单词.cpp */,
				8975E5D5281ED170006F4F6A /* 725.分隔链表.cpp */,
				8975E694281ED18E006F4F6A /* 728.自除数.cpp */,
				8975E6A3281ED190006F4F6A /* 739.每日温度.cpp */,
				8975E575281ED162006F4F6A /* 744.寻找比目标字母大的最小字母.cpp */,
				8975E6B3281ED192006F4F6A /* 747.至少是其他数字两倍的最大数.cpp */,
				8975E6BA281ED193006F4F6A /* 748.最短补全词.cpp */,
				8975E63D281ED183006F4F6A /* 762.二进制表示中质数个计算置位.cpp */,
				8975E68C281ED18D006F4F6A /* 783.二叉搜索树节点最小距离.cpp */,
				8975E669281ED189006F4F6A /* 786.第-k-个最小的素数分数.cpp */,
				8975E61B281ED17D006F4F6A /* 794.有效的井字游戏.cpp */,
				8975E649281ED185006F4F6A /* 797.所有可能的路径.cpp */,
				8975E60A281ED17A006F4F6A /* 798.得分最高的最小轮调.cpp */,
				8975E6B0281ED192006F4F6A /* 807.保持城市天际线.cpp */,
				8923BB972830C53B0034AA0D /* 812.最大三角形面积.cpp */,
				8975E6B7281ED193006F4F6A /* 825.适龄的朋友.cpp */,
				8975E6BC281ED194006F4F6A /* 838.推多米诺.cpp */,
				8975E6A5281ED191006F4F6A /* 846.一手顺子.cpp */,
				8975E5C3281ED16D006F4F6A /* 851.喧闹和富有.cpp */,
				8975E660281ED188006F4F6A /* 856.括号的分数.cpp */,
				8975E5CC281ED16F006F4F6A /* 859.亲密字符串.cpp */,
				8975E57B281ED162006F4F6A /* 869.重新排序得到-2-的幂.cpp */,
				8975E636281ED182006F4F6A /* 870.优势洗牌.cpp */,
				8975E5E2281ED173006F4F6A /* 875.爱吃香蕉的珂珂.cpp */,
				8975E5EF281ED175006F4F6A /* 876.链表的中间结点.cpp */,
				8975E597281ED165006F4F6A /* 884.两句话中的不常见单词.cpp */,
				8975E67C281ED18B006F4F6A /* 889.根据前序和后序遍历构造二叉树.cpp */,
				8975E583281ED163006F4F6A /* 895.最大频率栈.cpp */,
				8975E5D1281ED170006F4F6A /* 908.最小差值-i.cpp */,
				8975E587281ED163006F4F6A /* 911.在线选举.cpp */,
				8975E650281ED186006F4F6A /* 913.猫和老鼠.cpp */,
				8975E564281ED15E006F4F6A /* 917.仅仅反转字母.cpp */,
				894F52502825753F00EA6C32 /* 933.最近的请求次数.cpp */,
				894579FF2820EC3C00168863 /* 937.重新排列日志文件.cpp */,
				8975E633281ED181006F4F6A /* 938.二叉搜索树的范围和.cpp */,
				894F525C28294A4100EA6C32 /* 942.增减字符串匹配.cpp */,
				89951E78282D527E00B98F5D /* 944.删列造序.cpp */,
				8975E695281ED18F006F4F6A /* 954.二倍数对数组.cpp */,
				8975E5DB281ED171006F4F6A /* 969.煎饼排序.cpp */,
				8975E5E3281ED173006F4F6A /* 990.等式方程的可满足性.cpp */,
				8975E5E5281ED173006F4F6A /* 997.找到小镇的法官.cpp */,
				8975E686281ED18D006F4F6A /* 1001.网格照明.cpp */,
				8975E5DE281ED172006F4F6A /* 1005.k-次取反后最大化的数组和.cpp */,
				8975E64A281ED185006F4F6A /* 1011.在-d-天内送达包裹的能力.cpp */,
				8975E69C281ED18F006F4F6A /* 1020.飞地的数量.cpp */,
				8975E5B7281ED16B006F4F6A /* 1034.边框着色.cpp */,
				8975E6AE281ED192006F4F6A /* 1036.逃离大迷宫.cpp */,
				8975E624281ED17F006F4F6A /* 1038.把二叉搜索树转换为累加树.cpp */,
				8975E676281ED18B006F4F6A /* 1044.最长重复子串.cpp */,
				8975E662281ED188006F4F6A /* 1078.bigram-分词.cpp */,
				8975E5EB281ED174006F4F6A /* 1081.不同字符的最小子序列.cpp */,
				8975E655281ED186006F4F6A /* 1143.最长公共子序列.cpp */,
				8975E6BB281ED193006F4F6A /* 1154.一年中的第几天.cpp */,
				8975E5A4281ED167006F4F6A /* 1185.一周中的第几天.cpp */,
				8975E671281ED18A006F4F6A /* 1189.气球-的最大数量.cpp */,
				8975E56A281ED15F006F4F6A /* 1218.最长定差子序列.cpp */,
				8975E5DD281ED172006F4F6A /* 1220.统计元音字母序列的数目.cpp */,
				8975E5B8281ED16B006F4F6A /* 1221.分割平衡字符串.cpp */,
				8975E5E9281ED174006F4F6A /* 1296.划分数组为连续数字的集合.cpp */,
				8975E593281ED164006F4F6A /* 1305.两棵二叉搜索树中的所有元素.cpp */,
				8975E637281ED182006F4F6A /* 1332.删除回文子序列.cpp */,
				8975E576281ED162006F4F6A /* 1342.将数字变成-0-的操作次数.cpp */,
				8975E6B1281ED192006F4F6A /* 1345.跳跃游戏-iv.cpp */,
				8975E5A5281ED167006F4F6A /* 1373.二叉搜索子树的最大键值和.cpp */,
				8975E577281ED162006F4F6A /* 1380.矩阵中的幸运数.cpp */,
				8975E5B1281ED16A006F4F6A /* 1405.最长快乐字符串.cpp */,
				8975E668281ED189006F4F6A /* 1414.和为-k-的最少斐波那契数字数目.cpp */,
				8975E634281ED182006F4F6A /* 1436.旅行终点站.cpp */,
				8975E56C281ED15F006F4F6A /* 1446.连续字符.cpp */,
				8975E588281ED163006F4F6A /* 1447.最简分数.cpp */,
				8975E57F281ED163006F4F6A /* 1480.一维数组的动态和.cpp */,
				8975E645281ED184006F4F6A /* 1518.换酒问题.cpp */,
				8975E59E281ED166006F4F6A /* 1576.替换所有的问号.cpp */,
				8975E5BE281ED16C006F4F6A /* 1601.最多可达成的换楼请求数目.cpp */,
				8975E638281ED182006F4F6A /* 1606.找到处理最多请求的服务器.cpp */,
				8975E65D281ED187006F4F6A /* 1609.奇偶树.cpp */,
				8975E6AD281ED192006F4F6A /* 1610.可见点的最大数目.cpp */,
				8975E5B9281ED16B006F4F6A /* 1614.括号的最大嵌套深度.cpp */,
				8975E56D281ED15F006F4F6A /* 1629.按键持续时间最长的键.cpp */,
				8975E5DC281ED172006F4F6A /* 1688.比赛中的配对次数.cpp */,
				8975E5A7281ED168006F4F6A /* 1705.吃苹果的最大数目.cpp */,
				8975E580281ED163006F4F6A /* 1706.球会落何处.cpp */,
				8975E5AA281ED168006F4F6A /* 1716.计算力扣银行的钱.cpp */,
				8975E589281ED164006F4F6A /* 1719.重构一棵树的方案数.cpp */,
				8975E58D281ED164006F4F6A /* 1725.可以形成最大正方形的矩形数目.cpp */,
				89939A48282A9BFD00B9519C /* 1728.猫和老鼠-ii.cpp */,
				8975E611281ED17B006F4F6A /* 1748.唯一元素的和.cpp */,
				8975E688281ED18D006F4F6A /* 1763.最长的美好子字符串.cpp */,
				8975E696281ED18F006F4F6A /* 1765.地图中的最高点.cpp */,
				8975E692281ED18E006F4F6A /* 1791.找出星型图的中心节点.cpp */,
				8975E625281ED17F006F4F6A /* 1816.截断句子.cpp */,
				8928424C2822351800484B59 /* 1823.找出游戏的获胜者.cpp */,
				8975E6A8281ED191006F4F6A /* 1894.找到需要补充粉笔的学生编号.cpp */,
				8975E6AF281ED192006F4F6A /* 1962.移除石子使总数最小.cpp */,
				8975E65E281ED187006F4F6A /* 1984.学生分数的最小差值.cpp */,
				8975E5FE281ED178006F4F6A /* 1994.好子集的数目.cpp */,
				8975E673281ED18A006F4F6A /* 1995.统计特殊四元组.cpp */,
				8975E58A281ED164006F4F6A /* 1996.游戏中弱角色的数量.cpp */,
				8975E64E281ED185006F4F6A /* 2000.反转单词前缀.cpp */,
				8975E586281ED163006F4F6A /* 2006.差的绝对值为-k-的数对数目.cpp */,
				8975E5AD281ED169006F4F6A /* 2013.检测正方形.cpp */,
				8975E641281ED184006F4F6A /* 2016.增量元素之间的最大差值.cpp */,
				8975E6A2281ED190006F4F6A /* 2022.将一维数组转变成二维数组.cpp */,
				8975E61C281ED17D006F4F6A /* 2024.考试的最大困扰度.cpp */,
				8975E6B8281ED193006F4F6A /* 2028.找出缺失的观测数据.cpp */,
				8975E5BA281ED16B006F4F6A /* 2029.石子游戏-ix.cpp */,
				8975E680281ED18C006F4F6A /* 2034.股票价格波动.cpp */,
				8975E661281ED188006F4F6A /* 2038.如果相邻两个颜色均相同则删除当前颜色.cpp */,
				8975E658281ED187006F4F6A /* 2039.网络空闲的时刻.cpp */,
				8975E56E281ED15F006F4F6A /* 2043.简易银行系统.cpp */,
				8975E5C9281ED16E006F4F6A /* 2044.统计按位或能得到最大值的子集数目.cpp */,
				8975E5ED281ED175006F4F6A /* 2045.到达目的地的第二短时间.cpp */,
				8975E6AB281ED191006F4F6A /* 2047.句子中的有效单词数.cpp */,
				8975E639281ED182006F4F6A /* 2049.统计最高分的节点数目.cpp */,
				8975E591281ED164006F4F6A /* 2055.蜡烛之间的盘子.cpp */,
				8975E664281ED188006F4F6A /* 2100.适合打劫银行的日子.cpp */,
				8975E674281ED18A006F4F6A /* 2104.子数组范围和.cpp */,
				8975E5CB281ED16E006F4F6A /* 5187_收集足够苹果的最小花园周长.cpp */,
				8975E69E281ED190006F4F6A /* 5381_你可以工作的最大周数.cpp */,
				8975E6BE281ED194006F4F6A /* 5830_三除数.cpp */,
				8975E67A281ED18B006F4F6A /* 5832.构造元素不等于两相邻元素平均值的数组.cpp */,
				8975E66A281ED189006F4F6A /* 5838.检查字符串是否为数组前缀.cpp */,
				8975E68D281ED18D006F4F6A /* 5839.移除石子使总数最小.cpp */,
				8975E599281ED165006F4F6A /* 5840.使字符串平衡的最小交换次数.cpp */,
				8975E561281ED15E006F4F6A /* 5841.找出到每个位置为止最长的有效障碍赛跑路线.cpp */,
				8975E581281ED163006F4F6A /* 5843.作为子字符串出现在单词中的字符串数目.cpp */,
				8975E626281ED17F006F4F6A /* 5844.数组元素的最小非零乘积.cpp */,
				8975E60C281ED17A006F4F6A /* 5845.你能穿过矩阵的最后一天.cpp */,
				8975E63A281ED183006F4F6A /* 5850.找出数组的最大公约数.cpp */,
				8975E594281ED164006F4F6A /* 5851.找出不同的二进制字符串.cpp */,
				8975E6BF281ED194006F4F6A /* 5852.最小化目标值与所选元素的差.cpp */,
				8975E596281ED165006F4F6A /* 5853.从子集的和还原数组.cpp */,
				8975E62C281ED180006F4F6A /* 5854.学生分数的最小差值.cpp */,
				8975E571281ED160006F4F6A /* 5855.找出数组中的第K大整数.cpp */,
				8975E66B281ED189006F4F6A /* 5856.完成任务的最少工作时间段.cpp */,
				8975E697281ED18F006F4F6A /* 5857.不同的好子序列数目.cpp */,
				8975E574281ED162006F4F6A /* 5863.统计特殊四元组.cpp */,
				8975E5D6281ED171006F4F6A /* 5864.游戏中弱角色的数量.cpp */,
				8975E566281ED15F006F4F6A /* 5865.访问完所有房间的第一天.cpp */,
				8975E58B281ED164006F4F6A /* 5866.数组的最大公因数排序.cpp */,
				8975E678281ED18B006F4F6A /* 剑指 Offer II 069.山峰数组的顶部.cpp */,
				8975E61E281ED17D006F4F6A /* 冒泡排序.cpp */,
				8975E644281ED184006F4F6A /* 面试题17.14.最小K个数.cpp */,
				89951E7E282EAC7A00B98F5D /* A.面试题-01.05-一次编辑.cpp */,
				8975E5C1281ED16D006F4F6A /* Google_1.cpp */,
				8975E62A281ED180006F4F6A /* ListNode.cpp */,
				8975E61F281ED17E006F4F6A /* ListNode.h */,
				8975E612281ED17B006F4F6A /* main.cpp */,
				8975E5CD281ED16F006F4F6A /* TreeNode.cpp */,
				8975E55F281ED15E006F4F6A /* TreeNode.h */,
				8975E6B2281ED192006F4F6A /* UnionFind.cpp */,
				8975E5CE281ED16F006F4F6A /* UnionFind.h */,
			);
			path = Cpp;
			sourceTree = "<group>";
		};
		89C3FC4B26D1ED6600C87257 /* 排序 */ = {
			isa = PBXGroup;
			children = (
				89C3FC4C26D1ED8600C87257 /* sorts.swift */,
			);
			name = "排序";
			sourceTree = "<group>";
		};
		89F5C9F226B63F3000ABF72F = {
			isa = PBXGroup;
			children = (
				89554FA126BEDED300FEDFF1 /* Swift */,
				89A6BF0026BD8182007BDF6B /* Cpp */,
				89F5C9FC26B63F3000ABF72F /* Products */,
			);
			sourceTree = "<group>";
		};
		89F5C9FC26B63F3000ABF72F /* Products */ = {
			isa = PBXGroup;
			children = (
				89A6BEFF26BD8182007BDF6B /* Cpp */,
				89554F9A26BEDE7100FEDFF1 /* Swift_ */,
			);
			name = Products;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		89554F9926BEDE7100FEDFF1 /* Swift_ */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 89554F9E26BEDE7100FEDFF1 /* Build configuration list for PBXNativeTarget "Swift_" */;
			buildPhases = (
				89554F9626BEDE7100FEDFF1 /* Sources */,
				89554F9726BEDE7100FEDFF1 /* Frameworks */,
				89554F9826BEDE7100FEDFF1 /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Swift_;
			productName = SwiftCode;
			productReference = 89554F9A26BEDE7100FEDFF1 /* Swift_ */;
			productType = "com.apple.product-type.tool";
		};
		89A6BEFE26BD8182007BDF6B /* Cpp */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 89A6BF0526BD8182007BDF6B /* Build configuration list for PBXNativeTarget "Cpp" */;
			buildPhases = (
				89A6BEFB26BD8182007BDF6B /* Sources */,
				89A6BEFC26BD8182007BDF6B /* Frameworks */,
				89A6BEFD26BD8182007BDF6B /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Cpp;
			productName = Cpp;
			productReference = 89A6BEFF26BD8182007BDF6B /* Cpp */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		89F5C9F326B63F3000ABF72F /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastSwiftUpdateCheck = 1250;
				LastUpgradeCheck = 1250;
				TargetAttributes = {
					89554F9926BEDE7100FEDFF1 = {
						CreatedOnToolsVersion = 12.5.1;
					};
					89A6BEFE26BD8182007BDF6B = {
						CreatedOnToolsVersion = 12.5.1;
					};
				};
			};
			buildConfigurationList = 89F5C9F626B63F3000ABF72F /* Build configuration list for PBXProject "LeetCode" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 89F5C9F226B63F3000ABF72F;
			productRefGroup = 89F5C9FC26B63F3000ABF72F /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				89A6BEFE26BD8182007BDF6B /* Cpp */,
				89554F9926BEDE7100FEDFF1 /* Swift_ */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		89554F9626BEDE7100FEDFF1 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				89886F4B272C5E47003A626D /* main.swift in Sources */,
				89C84276274A09F400A73FAB /* Node.swift in Sources */,
				89886F63272CE20B003A626D /* ListNode.swift in Sources */,
				899A76D82747F72E006DA530 /* TreeNode.swift in Sources */,
				89D65EE12768D97200B855E3 /* PriorityQueue.swift in Sources */,
				8923BB9A2830C5990034AA0D /* 812.最大三角形面积.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		89A6BEFB26BD8182007BDF6B /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				89185D23282C0D7D00346F93 /* TreeNode.cpp in Sources */,
				8923BB982830C53C0034AA0D /* 812.最大三角形面积.cpp in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		89554F9F26BEDE7100FEDFF1 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		89554FA026BEDE7100FEDFF1 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
		89A6BF0326BD8182007BDF6B /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		89A6BF0426BD8182007BDF6B /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
		89F5CA0026B63F3000ABF72F /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 11.3;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
			};
			name = Debug;
		};
		89F5CA0126B63F3000ABF72F /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 11.3;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		89554F9E26BEDE7100FEDFF1 /* Build configuration list for PBXNativeTarget "Swift_" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				89554F9F26BEDE7100FEDFF1 /* Debug */,
				89554FA026BEDE7100FEDFF1 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		89A6BF0526BD8182007BDF6B /* Build configuration list for PBXNativeTarget "Cpp" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				89A6BF0326BD8182007BDF6B /* Debug */,
				89A6BF0426BD8182007BDF6B /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		89F5C9F626B63F3000ABF72F /* Build configuration list for PBXProject "LeetCode" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				89F5CA0026B63F3000ABF72F /* Debug */,
				89F5CA0126B63F3000ABF72F /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 89F5C9F326B63F3000ABF72F /* Project object */;
}
