/*
 * @lc app=leetcode.cn id=36 lang=swift
 *
 * [36] 有效的数独
 */

// @lc code=start
class Solution {
    func isValidSudoku(_ board: [[Character]]) -> Bool {
        var rows = [Int16](repeating: 0, count: 9)
        var cols = [Int16](repeating: 0, count: 9)
        var boxes = [Int16](repeating: 0, count: 9)
        
        let ascii_1: Character = "1"
        let ascii_value = ascii_1.asciiValue!
        for row in 0..<9 {
            for col in 0..<9 {
                let ch = board[row][col]
                if ch == "." {
                    continue
                }
                let num: Int16 = 1 << (ch.asciiValue! - ascii_value)
                if (rows[row] & num) != 0 {
                    return false
                }
                if (cols[col] & num) != 0 {
                    return false
                }
                let box = (row / 3) * 3 + col / 3
                if (boxes[box] & num) != 0 {
                    return false
                }
                
                rows[row] |= num
                cols[col] |= num
                boxes[box] |= num
            }
        }
        
        return true
    }
}
// @lc code=end

func main() {
    var board: [[Character]]
    var res: Bool
    
    /**
     输入：board =
     [["5","3",".",".","7",".",".",".","."]
     ,["6",".",".","1","9","5",".",".","."]
     ,[".","9","8",".",".",".",".","6","."]
     ,["8",".",".",".","6",".",".",".","3"]
     ,["4",".",".","8",".","3",".",".","1"]
     ,["7",".",".",".","2",".",".",".","6"]
     ,[".","6",".",".",".",".","2","8","."]
     ,[".",".",".","4","1","9",".",".","5"]
     ,[".",".",".",".","8",".",".","7","9"]]
     输出：true

     */
    board = [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
    res = true
    assert(res == Solution().isValidSudoku(board))
    
    /**
     输入：board =
     [["8","3",".",".","7",".",".",".","."]
     ,["6",".",".","1","9","5",".",".","."]
     ,[".","9","8",".",".",".",".","6","."]
     ,["8",".",".",".","6",".",".",".","3"]
     ,["4",".",".","8",".","3",".",".","1"]
     ,["7",".",".",".","2",".",".",".","6"]
     ,[".","6",".",".",".",".","2","8","."]
     ,[".",".",".","4","1","9",".",".","5"]
     ,[".",".",".",".","8",".",".","7","9"]]
     输出：false
     解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

     */
    board = [
        ["8","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
    res = false
    assert(res == Solution().isValidSudoku(board))
}
